package com.hrbb.loan.spi.ZZ;

import java.math.RoundingMode;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.hrbb.loan.pos.biz.backstage.inter.ILoanPosCreditApplyBackStageBiz;
import com.hrbb.loan.pos.util.DateUtil;
import com.hrbb.loan.pos.util.StringUtil;
import com.hrbb.loan.pos.util.ValidateUtil;
import com.hrbb.loan.spiconstants.CreditApplyHServiceConstants;
import com.hrbb.loan.spiconstants.HServiceReturnCode;
import com.hrbb.sh.framework.HResponse;
import com.hrbb.sh.framework.HServiceException;

/**
 * TransType:AP0003 -> 自助 APP 查询申请明细信息及申请状态
 * 
 * @author xiongshaogang
 * @version $Id: ZZAPPQueryApplyInfoHServiceImpl.java, v 0.1 2015年4月15日 下午5:48:53 xiongshaogang Exp $
 */
@Service("zzAppQueryApplyInfo")
public class ZZAPPQueryApplyInfoHServiceImpl extends ZZAPPFoundationServiceImpl {

    Logger                                  logger = LoggerFactory
                                                       .getLogger(ZZAPPQueryApplyInfoHServiceImpl.class);

    @Autowired
    private ILoanPosCreditApplyBackStageBiz loanPosCreditApplyBackStageBiz;
    
    @Override
    protected HResponse doProcesser(HResponse resp, Map<String, String> headerMap,
                                    Map<String, String> bodyMap) throws HServiceException {
        logger.debug("in ZZAPPQueryApplyInfoHServiceImpl...");

        // 1. 业务数据组装且查询
        List<Map<String, Object>> retList = loanPosCreditApplyBackStageBiz
            .queryCreditApplyDetailByZzApp(bodyMap.get(CreditApplyHServiceConstants.loanid),
                bodyMap.get(CreditApplyHServiceConstants.custid),
                bodyMap.get(CreditApplyHServiceConstants.paperkind),
                bodyMap.get(CreditApplyHServiceConstants.paperid),
                bodyMap.get(CreditApplyHServiceConstants.custname),
                bodyMap.get(CreditApplyHServiceConstants.begindate),
                bodyMap.get(CreditApplyHServiceConstants.enddate));

        if (retList == null || retList.size() < 1) {
            bodyMap.put("respcode", HServiceReturnCode.SUCCESS.getReturnCode());
            bodyMap.put("respmsg", HServiceReturnCode.SUCCESS.getReturnMessage());
            resp.setRespCode(HServiceReturnCode.SUCCESS.getReturnCode());
            resp.setRespMessage(HServiceReturnCode.SUCCESS.getReturnMessage());
            resp.setRespTime(new Date());
            return getBlankHResponse(resp, headerMap, bodyMap);
        }

        // 2. 格式化
        setFormat(retList);
        
        // 3. 成功应答
        Map<String, Object> rootMap = Maps.newHashMap();
        Map<String, Object> detailsMap = Maps.newHashMap();
        detailsMap.put("details", retList);
        detailsMap.put("respcode", HServiceReturnCode.SUCCESS.getReturnCode());
        detailsMap.put("respmsg", HServiceReturnCode.SUCCESS.getReturnMessage());
        
        // 3.1 签名处理
        headerMap.put("Mac", sign(detailsMap, null));
        
        rootMap.put("HrbbHeader", headerMap);
        rootMap.put("HrbbBody", detailsMap);
        resp.setRespCode(HServiceReturnCode.SUCCESS.getReturnCode());
        resp.setRespMessage(HServiceReturnCode.SUCCESS.getReturnMessage());
        resp.setRespTime(new Date());
        resp.setProperties(rootMap);
        logger.info("回写数据: " + resp.toString());
        logger.debug("out ZZAPPQueryApplyInfoHServiceImpl...");
        return resp;
    }
    
    /**
     * format.
     * 
     * @param formatList
     */
    private void setFormat(List<Map<String, Object>> formatList) {
        if (formatList.isEmpty()) {
            return;
        }
        
        Map<String, Object> tmpMap = null;
        for (int i = 0; i < formatList.size(); i++) {
            tmpMap = formatList.get(i);
            if (tmpMap.isEmpty()) {
                continue;
            }
            
            TmpMsgBodyParams = new ArrayList<String>();
            
            for (Map.Entry<String, Object> en : tmpMap.entrySet()) {
                String key = en.getKey();
                
                TmpMsgBodyParams.add(key);
                
                // format process
                if (tmpMap.get(key) == null) {
                    tmpMap.put(key, "");
                    continue;
                }
                
                // decimal
                if (CreditApplyHServiceConstants.apptcapi.equals(key)
                        || CreditApplyHServiceConstants.appmaxcred.equals(key)
                        || CreditApplyHServiceConstants.interate.equals(key)) {

                   /* tmpMap.put(key, decimalFormat.format(tmpMap.get(key)));*/

                    NumberFormat nf = NumberFormat.getNumberInstance();
                    nf.setMaximumFractionDigits(5);
                    nf.setRoundingMode(RoundingMode.CEILING);
                    nf.setGroupingUsed(false);
                    tmpMap.put(key, nf.format(tmpMap.get(key)));

                }
                
                // apprstate
                if (CreditApplyHServiceConstants.apprstate.equals(key)) {
                    tmpMap.put(key, zzAppStatusMap.get((String)tmpMap.get(key)));
                }
            }
            
            // 无数据字段赋空
            for (String param : MsgBodyParams) {
//                logger.info("设置应答字段 [" + param + "]");
                if (!TmpMsgBodyParams.contains(param)) {
                    tmpMap.put(param, "");
//                    logger.info("无数据字段赋空 [" + param + "]");
                }
            }
        }
        
    }

    /**
     * 请求包校验处理.
     * 
     * @param headerMap
     * @param bodyMap
     * @return
     * @throws Exception 
     */
    protected boolean validate(Map<String, String> headerMap, Map<String, String> bodyMap,
                             HResponse resp) throws HServiceException {
        if (!validateHeader(headerMap, bodyMap, resp)) {
            return false;
        }

        // 联合校验
        boolean idx = true;
        try {

            if (StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.loanid))
                && StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.custid))) {
                if (StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.paperid))
                    || StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.paperkind))) {
                    logger.error("申请流水、客户号为空、证件信息为空:[]",
                        bodyMap.get(CreditApplyHServiceConstants.paperkind) + "_"
                                + CreditApplyHServiceConstants.paperid);
                    bodyMap.put("respcode", HServiceReturnCode.PAPERID_ERROR.getReturnCode());
                    bodyMap.put("respmsg", HServiceReturnCode.PAPERID_ERROR.getReturnMessage());
                    resp.setRespCode(HServiceReturnCode.PAPERID_ERROR.getReturnCode());
                    resp.setRespMessage(HServiceReturnCode.PAPERID_ERROR.getReturnMessage());
                    idx = false;
                } else if (!ValidateUtil.checkIdNumber2(bodyMap
                    .get(CreditApplyHServiceConstants.paperid))) {
                    logger.error("申请流水、客户号为空、证件信息不合法:[]",
                        bodyMap.get(CreditApplyHServiceConstants.paperkind) + "_"
                                + CreditApplyHServiceConstants.paperid);
                    bodyMap.put("respcode", HServiceReturnCode.PAPERID_ERROR.getReturnCode());
                    bodyMap.put("respmsg", HServiceReturnCode.PAPERID_ERROR.getReturnMessage());
                    resp.setRespCode(HServiceReturnCode.PAPERID_ERROR.getReturnCode());
                    resp.setRespMessage(HServiceReturnCode.PAPERID_ERROR.getReturnMessage());
                    idx = false;
                }
            } else if (StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.loanid))
                       && (StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.paperid)) || StringUtil
                           .isEmpty(bodyMap.get(CreditApplyHServiceConstants.paperkind)))) {
                if (StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.custid))) {
                    logger.error("申请流水、证件信息为空、客户号为空:[]",
                        bodyMap.get(CreditApplyHServiceConstants.custid));
                    bodyMap.put("respcode", HServiceReturnCode.CUSTID_ERROR.getReturnCode());
                    bodyMap.put("respmsg", HServiceReturnCode.CUSTID_ERROR.getReturnMessage());
                    resp.setRespCode(HServiceReturnCode.CUSTID_ERROR.getReturnCode());
                    resp.setRespMessage(HServiceReturnCode.CUSTID_ERROR.getReturnMessage());
                    idx = false;
                }
            } else if (StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.custid))
                       && (StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.paperid)) || StringUtil
                           .isEmpty(bodyMap.get(CreditApplyHServiceConstants.paperkind)))) {
                if (StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.loanid))) {
                    logger.error("证件信息为空、客户号为空、申请流水为空:[]",
                        bodyMap.get(CreditApplyHServiceConstants.loanid));
                    bodyMap.put("respcode", HServiceReturnCode.LOANID_ERROR.getReturnCode());
                    bodyMap.put("respmsg", HServiceReturnCode.LOANID_ERROR.getReturnMessage());
                    resp.setRespCode(HServiceReturnCode.LOANID_ERROR.getReturnCode());
                    resp.setRespMessage(HServiceReturnCode.LOANID_ERROR.getReturnMessage());
                    idx = false;
                }
            }

            // 客户姓名
            if (!StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.custname))
                && !ValidateUtil.checkChinese(bodyMap.get(CreditApplyHServiceConstants.custname))) {
                logger.error("客户姓名不合法:[]", bodyMap.get(CreditApplyHServiceConstants.custname));
                bodyMap.put("respcode", HServiceReturnCode.CUSTNAME_ERROR.getReturnCode());
                bodyMap.put("respmsg", HServiceReturnCode.CUSTNAME_ERROR.getReturnMessage());
                resp.setRespCode(HServiceReturnCode.CUSTNAME_ERROR.getReturnCode());
                resp.setRespMessage(HServiceReturnCode.CUSTNAME_ERROR.getReturnMessage());
                idx = false;
            }

            // 证件类型
            if (!StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.paperkind))
                && !bodyMap.get(CreditApplyHServiceConstants.paperkind).equals("01")) {
                logger.error("证件类型不合法:[]", bodyMap.get(CreditApplyHServiceConstants.paperkind));
                bodyMap.put("respcode", HServiceReturnCode.PAPERKIND_ERROR.getReturnCode());
                bodyMap.put("respmsg", HServiceReturnCode.PAPERKIND_ERROR.getReturnMessage());
                resp.setRespCode(HServiceReturnCode.PAPERKIND_ERROR.getReturnCode());
                resp.setRespMessage(HServiceReturnCode.PAPERKIND_ERROR.getReturnMessage());
                idx = false;
            }

            // 开始、结束日期
            String beginDate = bodyMap.get(CreditApplyHServiceConstants.begindate);
            String endDate = bodyMap.get(CreditApplyHServiceConstants.enddate);
            if (!StringUtil.isEmpty(beginDate) && !DateUtil.isDateTimeFormat(beginDate, "yyyyMMdd")) {
                logger.error("开始日期格式不合法:[]", bodyMap.get(CreditApplyHServiceConstants.begindate));
                bodyMap.put("respcode", HServiceReturnCode.BEGINDATE_ERROR.getReturnCode());
                bodyMap.put("respmsg", HServiceReturnCode.BEGINDATE_ERROR.getReturnMessage());
                resp.setRespCode(HServiceReturnCode.BEGINDATE_ERROR.getReturnCode());
                resp.setRespMessage(HServiceReturnCode.BEGINDATE_ERROR.getReturnMessage());
                idx = false;
            } else if (!StringUtil.isEmpty(endDate)
                       && !DateUtil.isDateTimeFormat(endDate, "yyyyMMdd")) {
                logger.error("结束日期格式不合法:[]", bodyMap.get(CreditApplyHServiceConstants.begindate));
                bodyMap.put("respcode", HServiceReturnCode.BEGINDATE_ERROR.getReturnCode());
                bodyMap.put("respmsg", HServiceReturnCode.BEGINDATE_ERROR.getReturnMessage());
                resp.setRespCode(HServiceReturnCode.BEGINDATE_ERROR.getReturnCode());
                resp.setRespMessage(HServiceReturnCode.BEGINDATE_ERROR.getReturnMessage());
                idx = false;
            } else if (!StringUtil.isEmpty(beginDate)
                       && DateUtil.getTimeStamp(beginDate) >= System.currentTimeMillis()) {
                logger.error("开始日期范围不合法:[]", bodyMap.get(CreditApplyHServiceConstants.begindate));
                bodyMap.put("respcode", HServiceReturnCode.BEGINDATE_ERROR.getReturnCode());
                bodyMap.put("respmsg", HServiceReturnCode.BEGINDATE_ERROR.getReturnMessage());
                resp.setRespCode(HServiceReturnCode.BEGINDATE_ERROR.getReturnCode());
                resp.setRespMessage(HServiceReturnCode.BEGINDATE_ERROR.getReturnMessage());
                idx = false;
            } else if (!StringUtil.isEmpty(endDate) && !StringUtil.isEmpty(endDate)
                       && DateUtil.getTimeStamp(beginDate) > DateUtil.getTimeStamp(endDate)) {
                logger
                    .error("开始、结束日期范围不合法:[]", bodyMap.get(CreditApplyHServiceConstants.begindate));
                bodyMap.put("respcode", HServiceReturnCode.BEGINDATE_ERROR.getReturnCode());
                bodyMap.put("respmsg", HServiceReturnCode.BEGINDATE_ERROR.getReturnMessage());
                resp.setRespCode(HServiceReturnCode.BEGINDATE_ERROR.getReturnCode());
                resp.setRespMessage(HServiceReturnCode.BEGINDATE_ERROR.getReturnMessage());
                idx = false;
            }

        } catch (Exception e) {
            logger.error("校验 异常:[]", e.getMessage());
            return false;
        }

        return idx;
    }
    
    /**
     * 不等贷 申请状态转义.
     * 
     * 10 : 审核中
     * 13 ：审核补件
     * 20 ：审核通过
     * 30 ：审核拒绝
     * 90 ：主动撤销
     * 91 : 已签约
     */
    private static ImmutableMap<String, String> zzAppStatusMap = new ImmutableMap.Builder<String, String>().put("10", "10")
                                                                                                           .put("20", "10")
                                                                                                           .put("21", "13")
                                                                                                           .put("30", "10")
                                                                                                           .put("31", "10")
                                                                                                           .put("32", "13")
                                                                                                           .put("33", "10")
                                                                                                           .put("34", "10")
                                                                                                           .put("40", "10")
                                                                                                           .put("41", "10")
                                                                                                           .put("90", "20")
                                                                                                           .put("91", "30")
                                                                                                           .put("92", "30")
                                                                                                           .put("93", "90")
                                                                                                           .put("191", "91")
                                                                                                           .build();
    
    private static List<String> MsgBodyParams = new ArrayList<String>();
    static {
        MsgBodyParams.add("loanid");
        MsgBodyParams.add("custname");
        MsgBodyParams.add("begindate");
        MsgBodyParams.add("apptcapi");
        MsgBodyParams.add("retukind");
        MsgBodyParams.add("retukind2");
        MsgBodyParams.add("bankaccno");
        MsgBodyParams.add("apprstate");
        MsgBodyParams.add("additspec");
        MsgBodyParams.add("imgadditdetail");
        MsgBodyParams.add("refusereason");
        MsgBodyParams.add("appmaxcred");
        MsgBodyParams.add("apptterm");
        MsgBodyParams.add("interate");
        MsgBodyParams.add("appenddate");
        MsgBodyParams.add("posorg");
        MsgBodyParams.add("poscustname");
        MsgBodyParams.add("regicode");
        MsgBodyParams.add("dealscope");
        MsgBodyParams.add("operaddrRegion");
        MsgBodyParams.add("operaddrdetail");
        MsgBodyParams.add("industrytypeid");
        MsgBodyParams.add("paperkind");
        MsgBodyParams.add("paperid");
        MsgBodyParams.add("sexsign");
        MsgBodyParams.add("busiyear");
        MsgBodyParams.add("marrsign");
        MsgBodyParams.add("educsign");
        MsgBodyParams.add("childnum");
        MsgBodyParams.add("localhousenum");
        MsgBodyParams.add("otherhousenum");
        MsgBodyParams.add("mobilephone");
        MsgBodyParams.add("tel");
        MsgBodyParams.add("residentRegion");
        MsgBodyParams.add("residentdetail");
        MsgBodyParams.add("contactaddrflag");
        MsgBodyParams.add("weixinno");
        MsgBodyParams.add("qqno");
        MsgBodyParams.add("email");
        MsgBodyParams.add("familycustname");
        MsgBodyParams.add("matepaperkind");
        MsgBodyParams.add("matepaperid");
        MsgBodyParams.add("matemobilephone");
        MsgBodyParams.add("relacustname");
        MsgBodyParams.add("relakind");
        MsgBodyParams.add("relamobilephone");
        MsgBodyParams.add("relatel");
        MsgBodyParams.add("imagefilepackagename");
        MsgBodyParams.add("haspos");
        MsgBodyParams.add("loancountdown");
        MsgBodyParams.add("lastopertime");
    }
    private List<String> TmpMsgBodyParams = null;

    /**
     * 失败应答.
     * 
     * @param response
     * @return
     */
    protected HResponse getBlankHResponse(HResponse response, Map<String, String> headerMap, Map<String, String> bodyMap) {
        Map<String, Object> respMap = Maps.newHashMap();
        Map<String, Object> tmpBodyMap = Maps.newHashMap();
        List<Object> respList = Lists.newArrayList();
        tmpBodyMap.put("details", respList);
        tmpBodyMap.put("respcode", bodyMap.get("respcode"));
        tmpBodyMap.put("respmsg", bodyMap.get("respmsg"));
        
        // 5.1 签名处理
        headerMap.put("Mac", sign(tmpBodyMap, null));
        
        respMap.put("HrbbHeader", headerMap);
        respMap.put("HrbbBody", tmpBodyMap);
        response.setProperties(respMap);
        return response;
    }
}
