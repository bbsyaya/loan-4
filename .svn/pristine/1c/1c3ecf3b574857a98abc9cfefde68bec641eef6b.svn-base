package com.hrbb.loan.pos.biz.backstage.inter.impl;

import java.math.BigDecimal;
import java.text.ParseException;
import java.util.Date;
import java.util.List;
import java.util.Map;

import jodd.util.StringUtil;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.google.common.base.Objects;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.hrbb.loan.pos.biz.backstage.inter.LoanPosContractManagementBiz;
import com.hrbb.loan.pos.dao.entity.TApproveReject;
import com.hrbb.loan.pos.dao.entity.TApproveResult;
import com.hrbb.loan.pos.dao.entity.TContractManagement;
import com.hrbb.loan.pos.dao.entity.TCreditApply;
import com.hrbb.loan.pos.dao.entity.TCustomer;
import com.hrbb.loan.pos.dao.entity.TMessage;
import com.hrbb.loan.pos.service.LoanPosBusinessCodeService;
import com.hrbb.loan.pos.service.LoanPosChannelPosCust;
import com.hrbb.loan.pos.service.LoanPosContractManagementService;
import com.hrbb.loan.pos.service.LoanPosCreditApplyService;
import com.hrbb.loan.pos.service.LoanPosCustomerService;
import com.hrbb.loan.pos.service.LoanPosMessageService;
import com.hrbb.loan.pos.service.bean.ContractStateChangeMessage;
import com.hrbb.loan.pos.util.DateUtil;
import com.hrbb.loan.pos.util.constants.BusinessDictionaryConstants;

@Component("loanPosContractManagementBiz")
public class LoanPosContractManagementBizImpl implements
		LoanPosContractManagementBiz {
	@Autowired
	private LoanPosContractManagementService loanPosContractManagementService;
	
	@Autowired
	private LoanPosCreditApplyService loanPosCreditApplyService;
	
	@Autowired
	private LoanPosCustomerService loanPosCustomerService;
	
	@Autowired
	private LoanPosBusinessCodeService loanPosBusinessCodeService;
	
	@Autowired
	private LoanPosChannelPosCust loanPosChannelPosCust;
	
	@Autowired
	private LoanPosMessageService loanPosMessageService;
	
	private static final String LOAN_ID = "loanId";

	private static final Object CUST_ID = "custId";
	
	private static final ImmutableMap<String, String> termUnitMap = new ImmutableMap.Builder<String, String>().put("Y", "年").put("M", "月").put("D", "日").build();
	
	Logger logger = LoggerFactory.getLogger(LoanPosContractManagementBizImpl.class);
	
//	private static final String 
	
	
	@Override
	public List<Map<String, Object>> queryContractManagement(Map<String,Object> reqMap){
		List<Map<String, Object>> l =  loanPosContractManagementService.getContractManagementMap(reqMap);
		for (Map<String, Object> r : l){
			Date applyDate = (Date) r.get("applyCommitDate");
			r.put("applyCommitDate",DateUtil.getDateToString3(applyDate));
			Date approveDate = (Date) r.get("approveDate");
			r.put("approveDateStr",DateUtil.getDateToString3(approveDate));
			
	}
		return l;
	}
	
   @Override
    public List<TApproveResult> queryAvailableContractManagement(Map<String,Object> reqMap){
        List<TApproveResult> l =  loanPosContractManagementService.getAvailableContractManagementMap(reqMap);
        for (TApproveResult r : l){
            r.setApplyCommitDateStr(DateUtil.getDateToString3(r.getApplyCommitDate()));
            r.setApproveDateStr(DateUtil.getDateToString3(r.getApproveDate()));
    }
        return l;
    }
   
   @Override
   public Long countAvailableContractManagement(Map<String,Object> reqMap){
       return loanPosContractManagementService.countAvailableContractManagementMap(reqMap);
        
   }
	@Override
	public void deleteContractManagementInfo(String approveId) {
		loanPosContractManagementService.delContractManagement(approveId);
	}
	
	public int modifyContractManagementInfo(Map<String, Object> updateMap) {
		return loanPosContractManagementService.updateContractManagementInfo(updateMap);
	}
	
	public int modifyApprovalInfo(Map<String, Object> updateMap) {
		return loanPosContractManagementService.updateApprovalInfo(updateMap);
	}
	
	@Override
	public int insertContractManagementMap(Map<String, Object> reqMap) {
		return loanPosContractManagementService.insertContractManagementMap(reqMap);
	}


	@Override
	public TContractManagement selectByPrimaryKey(String custId) {
		TContractManagement t = loanPosContractManagementService.getContractInfoById(custId);
		t.setBeginDateStr(DateUtil.getDateToString3(t.getBeginDate()));
		t.setEndDateStr(DateUtil.getDateToString3(t.getEndDate()));
		return t;
	}

	@Override
	public int insertApproveReject(Map<String, Object> map) {
		return loanPosContractManagementService.insertApproveReject(map);
	}

	@Override
	public List<Map<String, Object>> selectSelectiveMap(Map<String, Object> reqMap){
		List<Map<String, Object>> resList = Lists.newArrayList();
		try{
			resList = loanPosContractManagementService.selectSelectiveMap(reqMap);
			if(null != resList && resList.size()>0){
			    for (Map<String, Object> map : resList) {
			        String channel = (String)map.get("channel");
			        String channelName = loanPosBusinessCodeService.getItemNameByNo("BizChannel", channel);
			        map.put("channelName", channelName);
			        //增加协议状态
			        String agmtStatus = (String)map.get("agreementStatus");
			        String agmtStatusName = loanPosBusinessCodeService.getItemNameByNo("agreementStatus", agmtStatus);
			        map.put("agmtStatusName", agmtStatusName);
                }
    			Long count = countSelectiveMap(reqMap);
    			Map<String, Object> countMap = Maps.newHashMap();
    			countMap.put("total", count);
    			resList.add(countMap);
			}
		}catch(Exception e){
			logger.error("select contract error:[]", e);
		}
		return resList;			
	}

	@Override
	public Long countSelectiveMap(Map<String, Object> reqMap) {
		// TODO Auto-generated method stub
		return loanPosContractManagementService.countAgreementMap(reqMap);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<Map<String, Object>> queryAgreementDetail(String contNo) {
		List<Map<String, Object>> resList = Lists.newArrayList();
		//根据合同号查询出合同信息
		try{
			Map<String, Object> contMap = loanPosContractManagementService.selectOneMapById(Objects.firstNonNull(contNo, ""));
			logger.debug("getContractInfo success contNo:[]", contNo);
			if(contMap != null){
				String loanId = (String)contMap.get(LOAN_ID);
				//再根据loanId查询出申请信息
				Map<String, Object> creMap = loanPosCreditApplyService.getOneCreditApply(Objects.firstNonNull(loanId, ""));
				//根据bankAccNo查询出银行信息查询出bankName
				Map<String, Object> bankMap = loanPosCreditApplyService.selectOneBankAcc((String)creMap.get("bankAccno"));
				//再根据custId查询出客户信息
				String custId = (String)contMap.get(CUST_ID);
				Map<String, Object> custMap = loanPosCustomerService.selectOneCustomer(Objects.firstNonNull(custId, ""));
				if(contMap.get("approveTerm") != null && contMap.get("approveTermUnit") != null){
					contMap.put("approveTerm", (String)contMap.get("approveTerm") + termUnitMap.get((String)contMap.get("approveTermUnit")));
				}
				resList = Lists.newArrayList(contMap, custMap, creMap, bankMap);
			}
		}catch(Exception e){
			logger.error("queryAgreementDetail failed : []", e);
		}
		return resList;
	}

	/** 
	 * @see com.hrbb.loan.pos.biz.backstage.inter.LoanPosContractManagementBiz#queryAgreementDetailForObjectFormat(java.lang.String)
	 */
	@Override
    public Map<String, Object> queryAgreementDetailForObjectFormat(String contNo) {
        Map<String, Object> resMap = Maps.newHashMap();
        try{
            //step1: 根据合同号查询出合同信息
            TContractManagement contractInfo = loanPosContractManagementService.getContractInfoByContNo(Objects.firstNonNull(contNo, ""));
            //银行编号转换中文
            String accountOpenBank = loanPosBusinessCodeService.getItemNameByNo("BankNo", contractInfo.getAccountOpenBank());
            contractInfo.setAccountOpenBank(accountOpenBank);
            resMap.put("contractInfo", contractInfo);
            logger.debug("getContractInfo success contNo:[]", contNo);
            if(contractInfo != null){
                String loanId = contractInfo.getLoanId();
                //step2: 再根据loanId查询出申请信息
                TCreditApply creditApplyInfo = loanPosCreditApplyService.queryCreditApply(Objects.firstNonNull(loanId, ""));
                resMap.put("creditApplyInfo", creditApplyInfo);
                //step3: 根据bankAccNo查询出银行信息查询出bankName
                Map<String, Object> bankMap = loanPosCreditApplyService.selectOneBankAcc(Objects.firstNonNull(creditApplyInfo.getBankAccno(),""));
                if(bankMap.get("bankName") != null){
                    String bankName = loanPosBusinessCodeService.getItemNameByNo("BankNo", (String)bankMap.get("bankName"));
                    bankMap.put("bankName",bankName);
                }
                resMap.put("bankMap", bankMap);
                //step4: 再根据custId查询出客户信息
                String custId = contractInfo.getCustId();
                TCustomer customerInfo = loanPosCustomerService.getCustumerInfoById(Objects.firstNonNull(custId, ""));
                //地址代码中文转换
                if(!StringUtil.isEmpty(customerInfo.getResidentProv())){
                    customerInfo.setResidentProv(loanPosBusinessCodeService.getItemNameByNo("AdminDivision", customerInfo.getResidentProv()));
                }
                if(!StringUtil.isEmpty(customerInfo.getResidentCity())){
                    customerInfo.setResidentCity(loanPosBusinessCodeService.getItemNameByNo("AdminDivision", customerInfo.getResidentCity()));
                }
                if(!StringUtil.isEmpty(customerInfo.getResidentDivision())){
                    customerInfo.setResidentDivision(loanPosBusinessCodeService.getItemNameByNo("AdminDivision", customerInfo.getResidentDivision()));
                }
                resMap.put("customerInfo", customerInfo);
            }
        }catch(Exception e){
            logger.error("queryAgreementDetail failed : []", e);
        }
        return resMap;
    }
	
	@Override
	public void updateAgreement(Map<String, Object> reqMap) {
		try{
			loanPosContractManagementService.updateContractSelectiveMap(reqMap);
		}catch(Exception e){
			logger.error("updateAgreement failed : []", e);
		}
	}

	@Override
	public int selectRejectMaxApproveNumByApproveId(String approveId) {
		return loanPosContractManagementService.getRejectMaxApproveNum(approveId);
	}
	
	@Override
	public int selectAdjustMaxApproveNumByApproveId(String approveId) {
		return loanPosContractManagementService.getAdjustMaxApproveNum(approveId);
	}

	@Override
	public TApproveReject getRejectInfo(Map<String, Object> updateMap) {
		return loanPosContractManagementService.getRejectInfo(updateMap);
	}

	/*@Override
	public int updateApproveInfo(Map<String, Object> updateMap) {
		return loanPosContractManagementService.updateApproveInfo(updateMap);
	}*/

	@Override
	public int updateApproveReject(Map<String, Object> map) {
		return loanPosContractManagementService.updateApproveInfo(map);
	}

	@Override
	public int insertApproveAdjust(Map<String, Object> map) {
		return loanPosContractManagementService.insertApproveAdjust(map);
	}

	@Override
	public TApproveResult getApproveInfo(String approveId) {
		TApproveResult ap = loanPosContractManagementService.getApproveInfo(approveId);
		if(ap!=null && ap.getApproveDate()!=null){
			ap.setApproveDateStr(DateUtil.getDateToString3(ap.getApproveDate()));
		}
		return ap;
	}

	
	@Override
	public String getcustId(String contNo) {
		return loanPosContractManagementService.getcustId(contNo);
	}

	@Override
	public TContractManagement getContractInfoByContNo(String contNo) {
		TContractManagement t = loanPosContractManagementService.getContractInfoByContNo(contNo);
		t.setSignDateStr(DateUtil.getDateToString3(t.getSignDate()));
		t.setBeginDateStr(DateUtil.getDateToString3(t.getBeginDate()));
		t.setEndDateStr(DateUtil.getDateToString3(t.getEndDate()));
		return t;
	}

	@Override
	public int updateContractStatus(Map<String, Object> updateMap) {
		return loanPosContractManagementService.updateContractStatus(updateMap);
	}

   @Override
    public TContractManagement getContractByContNo(String contNo) {
        return loanPosContractManagementService.getContractInfoByContNo(contNo);
    }
   
   public TContractManagement getContractForDisplay(String contNo) {
		TContractManagement ext = getContractByContNo(contNo);

		if (null != ext.getSignDate()) {
			ext.setSignDateStr(DateUtil.getDateToString3(ext.getSignDate()));
		}
		if (null != ext.getBeginDate()) {
			ext.setBeginDateStr(DateUtil.getDateToString3(ext.getBeginDate()));
		}
		if (null != ext.getEndDate()) {
			ext.setEndDateStr(DateUtil.getDateToString3(ext.getEndDate()));
		}
       
		// 银行开户行转换 add by Lin,Zhaolin at 2015-5-27
		String sAccountOpenBank = ext.getAccountOpenBank(); // 开户行
		if (sAccountOpenBank != null && sAccountOpenBank.trim().length() > 0) {
			String sAccountOpenBankName = loanPosBusinessCodeService
					.getItemNameByNo(BusinessDictionaryConstants.BankNo,sAccountOpenBank);
			 ext.setAccountOpenBank(sAccountOpenBankName);
		}
		
		String sAccountBranchBank = ext.getAccountBranchBank(); // 分行
		if (sAccountBranchBank != null
				&& sAccountBranchBank.trim().length() > 0
				&& sAccountBranchBank.indexOf("分行") == -1) {
			ext.setAccountBranchBank(sAccountBranchBank + "分行");
		}
		String sAccountSubBranchBank = ext.getAccountSubBranchBank(); // 支行
		if (sAccountSubBranchBank != null
				&& sAccountSubBranchBank.trim().length() > 0
				&& sAccountSubBranchBank.indexOf("支行") == -1) {
			ext.setAccountSubBranchBank(sAccountSubBranchBank + "支行");
		}
		//add channel & repayMethod
		if (null != ext.getChannel()) {
			String channelName = loanPosBusinessCodeService.getItemNameByNo(BusinessDictionaryConstants.BizChannel,ext.getChannel());
			 ext.setChannelName(channelName);
		}
		if (null != ext.getRepayMethod()) {
			String repayMethodName = loanPosBusinessCodeService.getItemNameByNo(BusinessDictionaryConstants.RepayMethod,ext.getRepayMethod());
			 ext.setRepayMethodName(repayMethodName);
		}
	   return ext;
   }

    @Override
    public List<Map<String, Object>> selectAvalibleSelectiveMap(Map<String, Object> reqMap) {
        List<Map<String, Object>> resList = Lists.newArrayList();
        try{
            resList = loanPosContractManagementService.selectAvalibleSelectiveMap(reqMap);
            if(null != resList && resList.size()>0){
                for (Map<String, Object> m : resList) {
                	//日期格式化
                    if(null != m.get("beginDate")){
                       String beginDateString =  DateUtil.getDateToString3((Date)m.get("beginDate"));
                       m.put("beginDate", beginDateString);
                    }
                    //日期格式化
                    if(null != m.get("endDate")){
                       String endDateString =  DateUtil.getDateToString3((Date)m.get("endDate"));
                       m.put("endDate", endDateString);
                    }
                }
            }
            
            Long count = loanPosContractManagementService.countAvalibleAgreementMap(reqMap);
            Map<String, Object> countMap = Maps.newHashMap();
            countMap.put("total", count);
            resList.add(countMap);
        }catch(Exception e){
            logger.error("select contract error:[]", e);
        }
        return resList;  
    }

    @Override
    public Long countAvalibleSelectiveMap(Map<String, Object> reqMap) {
        return loanPosContractManagementService.countAgreementMap(reqMap);
    }

	@Override
	public List<Map<String, Object>> getApproveMap(String loanId) {
		List<Map<String, Object>> result = loanPosContractManagementService.getApproveMap(loanId);
		for(Map<String,Object> row:result){		//add by Lin,Zhaolin for translate approve-date
			if(row.get("approveDate")!=null){
				row.put("approveDateStr",DateUtil.getDateToString3((Date)row.get("approveDate")));
			}
		}
		
		 return result;
	}

	@Override
	public void addContractStatusChangeMessage(String contNo, TContractManagement contract, String contStatus, String adjustReason) {
        try {
            /*Map<String,Object> reqMap1 = Maps.newHashMap();
            reqMap1.put("posCustId", contract.getPosCustId());
            reqMap1.put("channel", "UM");*/
        	String stdMerNo = "";
        	String stdshno = "";
           TCreditApply tCreditApply = loanPosCreditApplyService.queryCreditApply(contract.getLoanId());
           if(tCreditApply != null){
        	  stdMerNo = tCreditApply.getStdmerno();
        	  stdshno = tCreditApply.getStdshno();
        	   
           }
            // 协议调整消息
            ContractStateChangeMessage messageInfo = new ContractStateChangeMessage();
            messageInfo.setCnContNo(contNo);
            messageInfo.setContStatus(contStatus);
            messageInfo.setAdjustReason(adjustReason);
            messageInfo.setAmt(contract.getCreditLine().toString());
            if(!StringUtil.isEmpty(contract.getCreditInterest())){
                BigDecimal interRate = ((new BigDecimal(contract.getCreditInterest())).divide(new BigDecimal("100"))).setScale(4,BigDecimal.ROUND_HALF_UP);
                messageInfo.setInterRate(interRate.toString());
            }else{
                messageInfo.setInterRate(BigDecimal.ZERO.toString());
            }
            if(contract.getChannel()!=null && contract.getChannel().equals("58")){
                messageInfo.setCrExpDate(DateUtil.getDateToString12(contract.getEndDate()));
            }else{
                messageInfo.setCrExpDate(DateUtil.getDateToString3(contract.getEndDate()));
            }
            messageInfo.setRetuKind(contract.getPaybackMethod());
            messageInfo.setBankAcNo(contract.getAcceptAccount());
            messageInfo.setAdjustDate(DateUtil.getDateToString3(new Date()));
            // 待推送消息
            TMessage record = new TMessage();
            record.setMessageType("6");
            record.setMessageInfo(messageInfo.toString());
            record.setMessageAddi("0101");
            record.setCustId(contract.getCustId());
            record.setLoanId(contract.getLoanId());
            record.setContNo(contNo);
            if(contract.getChannel()!=null && contract.getChannel().equals("58")){
                record.setCreateTime(DateUtil.getStrToDate12(DateUtil.getCurrentTimePattern12()));
            }else{
                record.setCreateTime(new Date());
            }
            record.setStdshNo(stdshno);
            record.setStdMerNo(stdMerNo);
            record.setChannel(contract.getChannel());
            record.setInChannelKind("02");
            //入库
            loanPosMessageService.insert(record);
            logger.info("协议调整消息入库成功");
        } catch (Exception e) {
            logger.error("协议调整消息插入失败", e);
        }
     }

	@Override
	public long countApprove(Map<String, Object> reqMap) {
		  return loanPosContractManagementService.countApprove(reqMap);
	}
}
