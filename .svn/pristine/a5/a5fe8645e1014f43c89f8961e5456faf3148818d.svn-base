package com.hrbb.loan.pos.biz.backstage.inter.async;

import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import com.google.common.collect.Maps;
import com.hrbb.loan.pos.biz.backstage.inter.IAsyncLoadPoliceInfoService;
import com.hrbb.loan.pos.biz.backstage.inter.ILoanPosCreditApplyBackStageBiz;
import com.hrbb.loan.pos.biz.backstage.inter.IPoliceAndAICConnectBiz;
import com.hrbb.loan.pos.biz.backstage.inter.impl.LoadPoliceInfoService;
import com.hrbb.loan.pos.biz.bean.SeriaAsyncResult;
import com.hrbb.loan.pos.util.JsonUtil;

/**
 * @author zhangwei5@hrbb.com.cn
 * @date 2015年9月23日下午7:50:50 
 */
@Service("asyncLoadPoliceInfoService")
public class AsyncLoadPoliceInfoService implements IAsyncLoadPoliceInfoService{
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncLoadPoliceInfoService.class);
    @Autowired
    private IPoliceAndAICConnectBiz policeAndAICConnectBiz;
    @Autowired
    private LoadPoliceInfoService policeInfoService;
    @Autowired
    private ILoanPosCreditApplyBackStageBiz loanPosCreditApplyBackStageBiz;
    
    /**
     * 加载客户公安认证信息，首次加载，直接调用外部接口，并把信息存入db；否则查询db
     * @param loanId 贷款申请编号
     */
    @Async
    public SeriaAsyncResult<Boolean> loadPoliceInfo(String loanId){
        queryPoliceInfo(loanId, false);
        return new SeriaAsyncResult<Boolean>(true);
    }
    
    /**
     * 直接查询公安信息，不需经过db查询
     * @param loanId 贷款申请编号
     */
    public void loadPoliceInfoInTime(String loanId){
        queryPoliceInfo(loanId, true);
    }
    
    /**
     * @param loanId 贷款申请编号
     * @param isDirect 是否直接请求查询公安信息，不需先查询db
     */
    private void queryPoliceInfo(String loanId, boolean isDirect){
        List<Map<String, Object>> loanDetails = loanPosCreditApplyBackStageBiz
                .getCreditApplyDetail(loanId);
        if(null == loanDetails || loanDetails.size() < 2){
            LOGGER.error("customer is null & loanDetails = "+JsonUtil.toJson(loanDetails));
            return;
        }
        LOGGER.debug("current thread name:"+Thread.currentThread().getName());
        Map<String, Object> customer = loanDetails.get(1);
        Map<String, String> reqMap = Maps.newConcurrentMap();
        reqMap.put("idNo", (String)customer.get("paperId"));
        reqMap.put("custName", (String)customer.get("custName"));
        if(!isDirect)
            if(policeAndAICConnectBiz.hasPoliceInfo(reqMap.get("idNo"),reqMap.get("custName"))) return;
        policeInfoService.getCustPoliceInfo(reqMap);
    }

}
