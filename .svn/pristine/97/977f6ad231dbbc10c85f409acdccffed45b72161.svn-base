package com.hrbb.loan.pos.util;

import java.util.regex.Pattern;

import com.google.common.collect.ImmutableList;

public class ValidateUtil {

    public static final ImmutableList<String> unCorrectParamSqlList = new ImmutableList.Builder<String>()
                                                                        .add("where ")
                                                                        .add("select ").add("=")
                                                                        .add("=").add("!")
                                                                        .add("union ").add("(")
                                                                        .add(")").add("update ")
                                                                        .add("from ")
                                                                        .add("delete ")
                                                                        .add("truncate ")
                                                                        .add("alter ")
                                                                        .add("table ").build();

    //中文
    public static final String                chineseRegex          = "^[\\u4E00-\\u9FA5\\uF900-\\uFA2D]+$";
    public static final Pattern               chinesePattern        = Pattern.compile(chineseRegex);

    public static boolean checkChinese(String c) {
        return chinesePattern.matcher(c).find();
    }

    //身份证
    public static final String  idRegex   = "^[1-9]([0-9]{14}|[0-9|X]{17})$";
    public static final Pattern idPattern = Pattern.compile(idRegex);

    public static boolean checkIdNumber(String idNumber) {
        return IdUtil.verifyCertId(idNumber);
    }

    public static boolean checkIdNumber2(String idNumber) {
        CivldValidUtils utils = new CivldValidUtils();
        return utils.validate(idNumber);
    }

    //email
    public static final String  emailRegex   = "^\\w+((-\\w+)|(\\.\\w+))*\\@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$";
    public static final Pattern emailPattern = Pattern.compile(emailRegex);

    public static boolean checkEmail(String e) {
        return emailPattern.matcher(e).find();
    }

    //座机
    public static final String  telRegex   = "^(\\d{3}-|\\d{4}-)?(\\d{8}|\\d{7})$";
    public static final Pattern telPattern = Pattern.compile(telRegex);

    public static boolean checkTelephone(String telephone) {
        return telPattern.matcher(telephone).find();
    }

    //手机号
    public static final String  mobileRegex   = "^(13[0-9]|15[0-9]|18[0-9]|14[7]|17[0678])[0-9]{8}$";
    public static final Pattern mobilePattern = Pattern.compile(mobileRegex);

    public static boolean checkMobile(String mobile) {
        if (mobile.length() == 0) {
            return false;
        }
        return mobilePattern.matcher(mobile).find();
    }

    //整数
    public static final String  integerRegex   = "^[0-9]\\d*$";
    public static final Pattern integerPattern = Pattern.compile(integerRegex);

    public static boolean checkInteger(String i) {
        return integerPattern.matcher(i).find();
    }

    //浮点数
    public static final String  decimalRegex  = "^[0-9]\\d*(.\\d{1,2})?$|(0.\\d{1,2})";
    public static final Pattern doublePattern = Pattern.compile(decimalRegex);

    public static boolean checkDouble(String c) {
        return doublePattern.matcher(c).find();

    }

//    public static void main(String[] args) {
//        System.out.println(checkBankcard("6221881380011155302"));
//    }

    public static boolean checkIntegerOrDoubleArray(String... strings) {
        for (String str : strings) {
            if (!(checkDouble(str) || checkInteger(str))) {
                return false;
            }
        }
        return true;
    }

    public static boolean checkIntegerArray(String... strings) {
        for (String str : strings) {
            if (!checkInteger(str)) {
                return false;
            }
        }
        return true;
    }

    public static boolean checkUncorrectParam(String sqlParam) {
        for (String str : unCorrectParamSqlList) {
            if (sqlParam.contains(str)) {
                return false;
            }
        }
        return true;
    }

    /**
     * 银行卡号合格性校验
     * 
     * @param bankcard
     * @return
     */
    public static boolean checkBankcard(String bankcard){
        String resultStr = BankcardUtil.luhmCheck(bankcard);
        if(StringUtil.isNotEmpty(resultStr)){
            if("success".equals(resultStr)){
                return true;
            }
        }
        return false;
    }
}
