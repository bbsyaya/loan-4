package com.hrbb.loan.spi.SALE;

import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.hrbb.loan.channel.user.UserProcesser;
import com.hrbb.loan.pos.dao.TBankPropertiesDao;
import com.hrbb.loan.pos.util.MapUtils;
import com.hrbb.loan.pos.util.SignUtil;
import com.hrbb.loan.pos.util.StringUtil;
import com.hrbb.loan.spiconstants.HServiceReturnCode;
import com.hrbb.sh.framework.HRequest;
import com.hrbb.sh.framework.HResponse;
import com.hrbb.sh.framework.HService;
import com.hrbb.sh.framework.HServiceException;

/**
 * SL0009: 消费贷  贷款偿还方式查询.
 * 
 * @author xiongshaogang
 * @version $Id: ZzSaleAppBankPropertiesServiceImpl.java, v 0.1 2015年4月21日 下午2:01:29 xiongshaogang Exp $
 */
@Service("zzSaleAppBankProperties")
public class ZzSaleAppBankPropertiesServiceImpl implements HService {

	private final Logger logger = LoggerFactory
			.getLogger(ZzSaleAppBankPropertiesServiceImpl.class);

	@Autowired
	@Qualifier("tBankPropertiesDao")
	private TBankPropertiesDao tBankPropertiesDao;
	
	@Resource(name="userProcesser")
    private UserProcesser userProcesser;

	/**
	 * @see com.hrbb.sh.framework.HService#serve(com.hrbb.sh.framework.HRequest)
	 */
	@Override
	public HResponse serve(HRequest request) throws HServiceException {

		logger.debug("in ZzSaleAppBankPropertiesServiceImpl...");
		
		// 0. 接收请求包，解包
        Map<String, String> headerMap = (Map<String, String>) request.getProperties().get("HrbbHeader");
        Map<String, String> bodyMap = (Map<String, String>) request.getProperties().get("HrbbBody");
        logger.info("headerMap : " + MapUtils.toString(headerMap));
        logger.info("bodyMap : " + MapUtils.toString(bodyMap));
		
        // 1. 请求包校验
        HResponse resp = new HResponse();
        if (!validate(headerMap, bodyMap, resp)) {
            resp.setRespTime(new Date());
            return getBlankHResponse(resp, headerMap, bodyMap);
        }

        // 2. 验证数字签名,暂不实现
        String signedMsg = SignUtil.getSignMsg((Map<String, Object>)request.getProperties().get("HrbbBody"), null);
        logger.info("请求待签名串 signedMsg = [" + signedMsg + "]");
//        if (!SignUtil.verifySign(SignUtil.MD5_ALG, signedMsg, headerMap.get("Mac"), SignUtil.getProperty("app_posloan_signkey"))) {
//            logger.error("数字签名验证失败");
//            bodyMap.put("respcode", HServiceReturnCode.OTHER_ERROR.getReturnCode());
//            bodyMap.put("respmsg", HServiceReturnCode.OTHER_ERROR.getReturnMessage());
//            resp.setRespCode(HServiceReturnCode.OTHER_ERROR.getReturnCode());
//            resp.setRespMessage(HServiceReturnCode.OTHER_ERROR.getReturnMessage());
//            resp.setRespTime(new Date());
//            return getBlankHResponse(resp, headerMap, bodyMap);
//        }
        logger.info("数字签名验证通过!");
		
		// 3. 查询处理
        List<Map<String, Object>> returnBankPropertiesList = tBankPropertiesDao.selectByVersion(bodyMap.get("flag"));
        if (returnBankPropertiesList == null || returnBankPropertiesList.size() < 1) {
            logger.error("查询失败");
            bodyMap.put("respcode", HServiceReturnCode.LOANID_EXIST_ERROR.getReturnCode());
            bodyMap.put("respmsg", HServiceReturnCode.LOANID_EXIST_ERROR.getReturnMessage());
            resp.setRespCode(HServiceReturnCode.LOANID_EXIST_ERROR.getReturnCode());
            resp.setRespMessage(HServiceReturnCode.LOANID_EXIST_ERROR.getReturnMessage());
            resp.setRespTime(new Date());
            return getBlankHResponse(resp, headerMap, bodyMap);
        }
		
		// 5. 回写成功
		Map<String, Object> rootMap = Maps.newHashMap();
		Map<String, Object> detailsMap = Maps.newHashMap();
        detailsMap.put("details", returnBankPropertiesList);
        detailsMap.put("respcode", HServiceReturnCode.SUCCESS.getReturnCode());
        detailsMap.put("respmsg", HServiceReturnCode.SUCCESS.getReturnMessage());
		
		// 5.1 签名处理
        headerMap.put("Mac", sign(detailsMap, null));
        
        rootMap.put("HrbbHeader", headerMap);
        rootMap.put("HrbbBody", detailsMap);
        resp.setRespCode(HServiceReturnCode.SUCCESS.getReturnCode());
        resp.setRespMessage(HServiceReturnCode.SUCCESS.getReturnMessage());
        resp.setRespTime(new Date());
        resp.setProperties(rootMap);
        logger.info("回写数据: " + resp.toString());
        logger.debug("out ZzSaleAppBankPropertiesServiceImpl...");
		return resp;
	}
	
	/**
     * 请求包校验处理.
     * 
     * @param headerMap
     * @param bodyMap
     * @return
     * @throws Exception 
     */
    private boolean validate(Map<String, String> headerMap, Map<String, String> bodyMap,
                             HResponse resp) throws HServiceException {
        // 版本号
        if (StringUtil.isEmpty(headerMap.get("Version"))
            || !"20150415".equals(headerMap.get("Version"))) {
            logger.error("接口版本号为空或不合法:[]", headerMap.get("Version"));
            bodyMap.put("respcode", HServiceReturnCode.VERSION_ERRO_ERROR.getReturnCode());
            bodyMap.put("respmsg", HServiceReturnCode.VERSION_ERRO_ERROR.getReturnMessage());
            resp.setRespCode(HServiceReturnCode.VERSION_ERRO_ERROR.getReturnCode());
            resp.setRespMessage(HServiceReturnCode.VERSION_ERRO_ERROR.getReturnMessage());
            return false;
        }
        
        // 申请编号
        if (StringUtil.isEmpty(bodyMap.get("flag"))) {
            logger.error("标记为空:[]", bodyMap.get("flag"));
            bodyMap.put("respcode", HServiceReturnCode.OTHER_ERROR.getReturnCode());
            bodyMap.put("respmsg", HServiceReturnCode.OTHER_ERROR.getReturnMessage());
            resp.setRespCode(HServiceReturnCode.OTHER_ERROR.getReturnCode());
            resp.setRespMessage(HServiceReturnCode.OTHER_ERROR.getReturnMessage());
            return false;
        }
        
        return true;
    }
    
    /**
     * 失败应答.
     * 
     * @param response
     * @return
     */
    private HResponse getBlankHResponse(HResponse response, Map<String, String> headerMap, Map<String, String> bodyMap) {
        Map<String, Object> respMap = Maps.newHashMap();
        Map<String, Object> tmpBodyMap = Maps.newHashMap();
        List<Object> respList = Lists.newArrayList();
        tmpBodyMap.put("details", respList);
        tmpBodyMap.put("respcode", bodyMap.get("respcode"));
        tmpBodyMap.put("respmsg", bodyMap.get("respmsg"));
        
        // 签名处理
        headerMap.put("Mac", sign(tmpBodyMap, null));
        
        respMap.put("HrbbHeader", headerMap);
        respMap.put("HrbbBody", tmpBodyMap);
        response.setProperties(respMap);
        return response;
    }
    
    /**
     * 回写签名处理.
     * 
     * @param signMap
     * @param ignoreSet
     * @return
     */
    private String sign(Map<String, Object> signMap, Set<String> ignoreSet) {
        String signedMsg = SignUtil.getSignMsg(signMap, ignoreSet);
        logger.info("应答待签名串 signedMsg = [" + signedMsg + "]");
        String signRet = SignUtil.sign(SignUtil.MD5_ALG, signedMsg, SignUtil.getProperty("app_posloan_signkey"));
        logger.info("应答签名 Mac = [" + signRet + "]");
        return signRet;
    }
}
