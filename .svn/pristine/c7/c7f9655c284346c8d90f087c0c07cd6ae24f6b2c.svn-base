package com.hrbb.loan.jms.listener;

import java.math.BigDecimal;
import java.util.Date;
import java.util.Map;

import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageListener;
import javax.jms.TextMessage;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSON;
import com.google.common.base.Objects;
import com.google.common.collect.Maps;
import com.hrbb.loan.pay.api.response.SinglePayResponse;
import com.hrbb.loan.pay.constants.RespStatus;
import com.hrbb.loan.pos.biz.backstage.inter.IReceiptManageBiz;
import com.hrbb.loan.pos.biz.backstage.inter.ISmsSenderBiz;
import com.hrbb.loan.pos.biz.backstage.inter.LoanPosContractManagementBiz;
import com.hrbb.loan.pos.dao.TMessageDao;
import com.hrbb.loan.pos.dao.entity.TContractManagement;
import com.hrbb.loan.pos.dao.entity.TCustomer;
import com.hrbb.loan.pos.dao.entity.TMessage;
import com.hrbb.loan.pos.dao.entity.TReceiptInfo;
import com.hrbb.loan.pos.dao.entity.TSmsTemplate;
import com.hrbb.loan.pos.dao.entity.TTransactionRelative;
import com.hrbb.loan.pos.service.IGenericConfigService;
import com.hrbb.loan.pos.service.LoanPosCreditApplyService;
import com.hrbb.loan.pos.service.LoanPosCustomerService;
import com.hrbb.loan.pos.service.TransactionRelativeService;
import com.hrbb.loan.pos.service.bean.IssueResultMessage;
import com.hrbb.loan.pos.util.DateUtil;
import com.hrbb.loan.pos.util.SmsTemplateFactory;

/**
 * 
 * @author cjq
 * @version $Id: PayOrderListener.java, v 0.1 2015年8月6日 下午9:12:19 cjq Exp $
 */
@Service("payOrderListener")
public class PayOrderListener implements MessageListener {

    private static final Logger          logger = LoggerFactory.getLogger(PayOrderListener.class);

    @Autowired
    private TransactionRelativeService   transactionRelativeService;

    @Autowired
    private LoanPosCreditApplyService    loanPosCreditApplyService;

    @Autowired
    private LoanPosContractManagementBiz loanPosContractManagementBiz;

    @Autowired
    private IReceiptManageBiz            receiptManageBiz;

    @Autowired
    private TMessageDao                  tMessageDao;

    @Autowired
    private ISmsSenderBiz                smsSenderBiz;

    @Autowired
    private LoanPosCustomerService       loanPosCustomerService;

    @Autowired
    private IGenericConfigService        genericConfigService;

    @Override
    public void onMessage(Message message) {
        TextMessage textMsg = (TextMessage) message;
        try {
            logger.info("received a text message: " + textMsg.getText());
            SinglePayResponse genericResponse = JSON.parseObject(textMsg.getText(),
                SinglePayResponse.class);
            // 解析订单号，即orderNo
            String outBizNo = genericResponse.getOrderNo();
            // 对应该笔交易记录
            TTransactionRelative tTransactionRelative = transactionRelativeService
                .queryTTransactionRelativeByOutBizNo(outBizNo);
            if (tTransactionRelative != null) {
                if (tTransactionRelative.getTransactionType().equals("pay")) {
                    String receiptId = tTransactionRelative.getBusinessId();
                    // 查询对应借据
                    TReceiptInfo receipt = receiptManageBiz.selectReceiptByPrimary(receiptId);

                    if (RespStatus.SUCCESS.getValue().equals(genericResponse.getStatus())) { //交易成功
                        // 更新借据数据
                        Map<String, Object> reqMap = Maps.newHashMap();
                        reqMap.put("receiptId", receipt.getReceiptId());
                        reqMap.put("loanExecuteStatus", "20");
                        reqMap.put("lnExctStsUpdtTm", new Date());
                        reqMap.put("loanTotalBalance", receipt.getPayApplyAmt());
                        reqMap.put("normalBalance", receipt.getPayApplyAmt());
                        reqMap.put("overdueBalance", BigDecimal.ZERO);
                        reqMap.put("innerOwnedInterest", BigDecimal.ZERO);
                        reqMap.put("outterOwnedInterest", BigDecimal.ZERO);
                        //                  reqMap.put("clearStatus", "02");        //结清状态=02未结清        //去除@2015-7-13 by Lin,Zhaolin for merge facility's status
                        reqMap.put("loanStatus", "01"); //贷款状态=01正常

                        /*更新实际放款日期*/
                        Date issueDate = new Date(); // 起息日（放款成功日期）
                        // 理论到期日（起息日+期限）
                        Date endDateTemp = DateUtil.getDatePattern3(DateUtil.getRelativeDate(
                            issueDate, 0, Integer.parseInt(receipt.getPayApplyTerm()), -1));
                        //利随本清  实际到期日跳过节假日
                        Date endDate = null;
                        if (receipt.getPaybackWay() != null && receipt.getPaybackWay().equals("90")) {
                            endDate = genericConfigService.getWorkingDate(endDateTemp);
                        } else {
                            endDate = endDateTemp;
                        }
                        reqMap.put("actualIssueDate", issueDate);
                        reqMap.put("actualMaturity", endDate);
                        reqMap.put("issueTime", issueDate); //支付时间

                        receiptManageBiz.updateReceiptInfo(reqMap);

                        //再查询出这笔记录
                        receipt = receiptManageBiz.selectReceiptByPrimary(receipt.getReceiptId());

                        //推送消息
                        senMessage(receipt, "2");
                        logger.info("[facilityId=" + receipt.getReceiptId() + "]放款成功消息入库成功");

                        //短信入库
                        TContractManagement tCont = loanPosContractManagementBiz
                            .getContractByContNo(receipt.getContNo());
                        insertPaymentSmsMessage(receipt, tCont.getChannel());
                        logger.info("[facilityId=" + receipt.getReceiptId() + "]放款成功短信入库成功");

                    } else if (RespStatus.PROCESSING.getValue().equals(genericResponse.getStatus())) {
                        logger.info("交易处理中");
                    } else {//交易失败
                        logger.info("交易失败，失败原因为" + genericResponse.getRespMessage());
                        Map<String, Object> reqMap = Maps.newHashMap();
                        reqMap.put("receiptId", receipt.getReceiptId());
                        reqMap.put("loanExecuteStatus", "29");
                        reqMap.put("lnExctStsUpdtTm", new Date());
                        receiptManageBiz.updateReceiptInfo(reqMap);
                    }
                }
            }
        } catch (JMSException e) {
            logger.error("JMS error", e);
        } catch (Exception e) {
            logger.error("系统异常", e);
        }
    }

    //推送消息
    private void senMessage(TReceiptInfo receipt, String issueResult) {
        //查出渠道，再根据渠道返回还款方式
        TContractManagement contract = loanPosContractManagementBiz.getContractInfoByContNo(Objects
            .firstNonNull(receipt.getContNo(), ""));
        // 推送消息
        IssueResultMessage issueMessage = new IssueResultMessage();
        //1代表成功
        issueMessage.setIssueResult(issueResult);
        //用款申请号
        issueMessage.setListId(Objects.firstNonNull(receipt.getPayApplyId(), ""));
        //金额
        issueMessage.setIssueAmt(Objects.firstNonNull(receipt.getPayApplyAmt(), "").toString());
        //贷款利率
        if (receipt.getLoanInterest() != null) {
            BigDecimal interRate = ((receipt.getLoanInterest()).divide(new BigDecimal("100")))
                .setScale(4, BigDecimal.ROUND_HALF_UP);
            issueMessage.setInterRate(interRate.toString());
        } else {
            issueMessage.setInterRate(BigDecimal.ZERO.toString());
        }

        if (contract.getChannel().equals("UM")) {
            //起待日
            if (receipt.getBeginDate() != null) {
                issueMessage.setValueDate(DateUtil.getDateToString3(receipt.getActualIssueDate()));
            } else {
                issueMessage.setValueDate("");
            }
            //到期日
            if (receipt.getEndDate() != null) {
                issueMessage.setExpDate(DateUtil.getDateToString3(receipt.getActualMaturity()));
            }
        } else {
            //起待日
            if (receipt.getBeginDate() != null) {
                issueMessage.setValueDate(DateUtil.getDateToString1(receipt.getActualIssueDate()));
            } else {
                issueMessage.setValueDate("");
            }
            //到期日
            if (receipt.getEndDate() != null) {
                issueMessage.setExpDate(DateUtil.getDateToString1(receipt.getActualMaturity()));
            }
        }

        //计息方式
        issueMessage.setIntCalcMeth("");

        issueMessage.setRetuKind(returnKindMap(contract.getChannel(), receipt.getPaybackWay()));
        issueMessage.setBankAcNo(Objects.firstNonNull(receipt.getPayAccount(), ""));

        issueMessage.setBankName(Objects.firstNonNull(receipt.getAccountOpenBank(), ""));
        issueMessage.setBankSubName(Objects.firstNonNull(receipt.getAccountSubBranchBank(), ""));
        issueMessage.setBankBranchName(receipt.getAccountBranckBank());
        issueMessage.setRefuseReason("");
        TMessage message = new TMessage();
        message.setChannel(contract.getChannel());
        message.setInChannelKind(contract.getInChannelKind());
        message.setLoanId(contract.getLoanId());
        message.setCustId(contract.getCustId());
        message.setListId(receipt.getPayApplyId());
        message.setContNo(receipt.getContNo());
        message.setCreateTime(new Date());
        message.setMessageType("5");
        message.setMessageInfo(issueMessage.toString());
        //申请信息
        Map<String, Object> loanMap = loanPosCreditApplyService.getOneCreditApply(Objects
            .firstNonNull(contract.getLoanId(), ""));
        if (loanMap != null) {
            message.setStdshNo((String) loanMap.get("stdshno"));
            message.setStdMerNo((String) loanMap.get("stdmerno"));
        } else {
            message.setStdshNo("");
            message.setStdMerNo("");
        }
        tMessageDao.insert(message);

    }

    /**
     * 放款短信入库
     * 
     * @param contract
     */
    private void insertPaymentSmsMessage(TReceiptInfo receipt, String channel) throws Exception {
        // 发送短信
        String tempId = SmsTemplateFactory.getPaymentSms(channel);
        // 获取短信模板
        TSmsTemplate smsTemplate = smsSenderBiz.getSmsTemplate(tempId);
        // 编辑短信内容
        String sendContent = smsTemplate.getSmsContent();
        // 用款金额
        sendContent = sendContent.replace("%amount1%", receipt.getPayApplyAmt().toString());
        // 放款日期
        sendContent = sendContent.replace("%date%", DateUtil.getCurrentTimePattern3());
        // 银行卡号后4位
        String payAccount = receipt.getPayAccount();
        payAccount = payAccount.substring(payAccount.length() - 4, payAccount.length());
        sendContent = sendContent.replace("%amount2%", payAccount);
        // 获取手机号
        TCustomer customer = loanPosCustomerService.getCustumerInfoById(receipt.getCustId());
        // 短信入库
        smsSenderBiz.insertSmsMessage(tempId, customer.getMobilePhone(), sendContent);
    }

    /**
     * 
     * @param channel
     * @param returnKind
     * @return
     */
    private String returnKindMap(String channel, String returnKind) {
        switch (channel) {
            case "UM":
                if ("90".equals(returnKind)) {
                    return "01";
                }
            default:
                return returnKind;
        }
    }
}
