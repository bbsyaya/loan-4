package com.hrbb.loan.spi.ZZ;

import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.google.common.collect.Maps;
import com.hrbb.loan.channel.user.UserProcesser;
import com.hrbb.loan.pos.util.MapUtils;
import com.hrbb.loan.pos.util.SignUtil;
import com.hrbb.loan.pos.util.StringUtil;
import com.hrbb.loan.spiconstants.HServiceReturnCode;
import com.hrbb.sh.framework.HRequest;
import com.hrbb.sh.framework.HResponse;
import com.hrbb.sh.framework.HService;
import com.hrbb.sh.framework.HServiceException;

/**
 * 基础处理类.
 * 
 * @author xiongshaogang
 * @version $Id: ZZAPPFoundationServiceImpl.java, v 0.1 2015年4月21日 下午2:01:29 xiongshaogang Exp $
 */
@Service("zzAppFoundation")
public abstract class ZZAPPFoundationServiceImpl implements HService {

	private final Logger logger = LoggerFactory
			.getLogger(ZZAPPFoundationServiceImpl.class);

	@Resource(name="userProcesser")
    protected UserProcesser userProcesser;

	/**
	 * @see com.hrbb.sh.framework.HService#serve(com.hrbb.sh.framework.HRequest)
	 */
	@Override
	public HResponse serve(HRequest request) throws HServiceException {

		// 0. 接收请求包，解包
        Map<String, String> headerMap = (Map<String, String>) request.getProperties().get("HrbbHeader");
        Map<String, String> bodyMap = (Map<String, String>) request.getProperties().get("HrbbBody");
        logger.info("headerMap : " + MapUtils.toString(headerMap));
        logger.info("bodyMap : " + MapUtils.toString(bodyMap));
		
        // 1. 请求包校验
        HResponse resp = new HResponse();
        if (!validate(headerMap, bodyMap, resp)) {
            resp.setRespTime(new Date());
            return getBlankHResponse(resp, headerMap, bodyMap);
        }

        // 2. 验证数字签名,暂不实现
        String signedMsg = SignUtil.getSignMsg((Map<String, Object>)request.getProperties().get("HrbbBody"), null);
        logger.info("请求待签名串 signedMsg = [" + signedMsg + "]");
//        if (!SignUtil.verifySign(SignUtil.MD5_ALG, signedMsg, headerMap.get("Mac"), SignUtil.getProperty("app_posloan_signkey"))) {
//            logger.error("数字签名验证失败");
//            bodyMap.put("respcode", HServiceReturnCode.OTHER_ERROR.getReturnCode());
//            bodyMap.put("respmsg", HServiceReturnCode.OTHER_ERROR.getReturnMessage());
//            resp.setRespCode(HServiceReturnCode.OTHER_ERROR.getReturnCode());
//            resp.setRespMessage(HServiceReturnCode.OTHER_ERROR.getReturnMessage());
//            resp.setRespTime(new Date());
//            return getBlankHResponse(resp, headerMap, bodyMap);
//        }
        logger.info("数字签名验证通过!");
        
        // 3. 会话状态验证
        if (!"9".equals(headerMap.get("AppSource"))) {
//        if (!userProcesser.CheckUserLoginStatus(headerMap.get("UserId"), headerMap.get("SessionId"))) {
//            logger.error("用户未登陆");
//            bodyMap.put("respcode", HServiceReturnCode.NO_LOGIN_ERROR.getReturnCode());
//            bodyMap.put("respmsg", HServiceReturnCode.NO_LOGIN_ERROR.getReturnMessage());
//            resp.setRespCode(HServiceReturnCode.NO_LOGIN_ERROR.getReturnCode());
//            resp.setRespMessage(HServiceReturnCode.NO_LOGIN_ERROR.getReturnMessage());
//            return getBlankHResponse(resp, headerMap, bodyMap);
//        }
        }
		
		return doProcesser(resp, headerMap, bodyMap);
	}
	
	/**
	 * 业务入口.
	 * 
	 * @param resp
	 * @param headerMap
	 * @param bodyMap
	 * @return
	 * @throws HServiceException
	 */
	protected abstract HResponse doProcesser(HResponse resp, Map<String, String> headerMap, Map<String, String> bodyMap) throws HServiceException;
	
	/**
     * 请求包校验处理.
     * 
     * @param headerMap
     * @param bodyMap
     * @return
     * @throws Exception 
     */
    protected boolean validate(Map<String, String> headerMap, Map<String, String> bodyMap,
                             HResponse resp) throws HServiceException{
        
        if (!validateHeader(headerMap, bodyMap, resp)) {
            return false;
        }
        
        return true;
    }
    
    protected boolean validateHeader(Map<String, String> headerMap, Map<String, String> bodyMap,
                                     HResponse resp) {
        // 版本
        if (!"20150415".equals(headerMap.get("Version"))) {
            logger.error("接口版本号为空或不合法:[]", headerMap.get("Version"));
            bodyMap.put("respcode", HServiceReturnCode.VERSION_ERRO_ERROR.getReturnCode());
            bodyMap.put("respmsg", HServiceReturnCode.VERSION_ERRO_ERROR.getReturnMessage());
            resp.setRespCode(HServiceReturnCode.VERSION_ERRO_ERROR.getReturnCode());
            resp.setRespMessage(HServiceReturnCode.VERSION_ERRO_ERROR.getReturnMessage());
            return false;
        }
        logger.info("version validate success !");
        
        /**
         * 不等贷前置过来请求，无用户概念.
         */
        if (!"9".equals(headerMap.get("AppSource"))) {
            // 用户编号
            if (StringUtil.isEmpty(headerMap.get("UserId"))) {
                logger.error("用户编号为空或不合法:[]", headerMap.get("UserId"));
                bodyMap.put("respcode", HServiceReturnCode.NO_USERID_ERROR.getReturnCode());
                bodyMap.put("respmsg", HServiceReturnCode.NO_USERID_ERROR.getReturnMessage());
                resp.setRespCode(HServiceReturnCode.NO_USERID_ERROR.getReturnCode());
                resp.setRespMessage(HServiceReturnCode.NO_USERID_ERROR.getReturnMessage());
                return false;
            }
            logger.info("UserId validate success !");
            
            // SessionId
            if (StringUtil.isEmpty(headerMap.get("SessionId"))) {
                logger.error("SessionId为空或不合法:[]", headerMap.get("SessionId"));
                bodyMap.put("respcode", HServiceReturnCode.NO_SESSIONID_ERROR.getReturnCode());
                bodyMap.put("respmsg", HServiceReturnCode.NO_SESSIONID_ERROR.getReturnMessage());
                resp.setRespCode(HServiceReturnCode.NO_SESSIONID_ERROR.getReturnCode());
                resp.setRespMessage(HServiceReturnCode.NO_SESSIONID_ERROR.getReturnMessage());
                return false;
            }
            logger.info("SessionId validate success !");
        }
        
        return true;
    }
    
    /**
     * 失败应答.
     * 
     * @param response
     * @return
     */
    protected HResponse getBlankHResponse(HResponse response, Map<String, String> headerMap, Map<String, String> bodyMap) {
        Map<String, Object> respMap = Maps.newHashMap();
        
        // 签名处理
        Map<String, Object> signMap = Maps.newHashMap();
        for (Iterator<String> it = bodyMap.keySet().iterator(); it.hasNext();) {
            String key = it.next();
            signMap.put(key, bodyMap.get(key));
        }
        headerMap.put("Mac", sign(signMap, null));
        
        respMap.put("HrbbHeader", headerMap);
        respMap.put("HrbbBody", bodyMap);
        response.setProperties(respMap);
        return response;
    }
    
    /**
     * 回写签名处理.
     * 
     * @param signMap
     * @param ignoreSet
     * @return
     */
    protected String sign(Map<String, Object> signMap, Set<String> ignoreSet) {
        String signedMsg = SignUtil.getSignMsg(signMap, ignoreSet);
        logger.info("应答待签名串 signedMsg = [" + signedMsg + "]");
        String signRet = SignUtil.sign(SignUtil.MD5_ALG, signedMsg, SignUtil.getProperty("app_posloan_signkey"));
        logger.info("应答签名 Mac = [" + signRet + "]");
        return signRet;
    }
}
