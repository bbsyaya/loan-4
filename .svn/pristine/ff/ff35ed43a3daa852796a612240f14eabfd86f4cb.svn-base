package com.hrbb.loan.pos.biz.bean.pay.impl;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.collect.Maps;
import com.hrbb.loan.pos.biz.backstage.inter.IReceiptManageBiz;
import com.hrbb.loan.pos.biz.bean.pay.IPayService;
import com.hrbb.loan.pos.biz.bean.pay.PayServiceFactory;
import com.hrbb.loan.pos.biz.bean.pay.constant.PayTypeEnum;
import com.hrbb.loan.pos.dao.entity.TBankAccnoInfo;
import com.hrbb.loan.pos.dao.entity.TCustomer;
import com.hrbb.loan.pos.dao.entity.TPaybackApplyInfo;
import com.hrbb.loan.pos.dao.entity.TReceiptInfo;
import com.hrbb.loan.pos.dao.entity.TTransactionRelative;
import com.hrbb.loan.pos.dao.entity.TransactionLog;
import com.hrbb.loan.pos.entity.SpringBeans;
import com.hrbb.loan.pos.service.ChannelMapperDictionaryService;
import com.hrbb.loan.pos.service.IGenericConfigService;
import com.hrbb.loan.pos.service.LoanPosCustomerService;
import com.hrbb.loan.pos.service.TransactionRelativeService;
import com.hrbb.loan.pos.util.DateUtil;
import com.hrbb.loan.yjrpay.api.PayCollectQueryFacade;
import com.hrbb.loan.yjrpay.constants.AccountType;
import com.hrbb.loan.yjrpay.constants.CertType;
import com.hrbb.loan.yjrpay.constants.ProductCode;
import com.hrbb.loan.yjrpay.request.BillPCRequest;
import com.hrbb.loan.yjrpay.response.GenericResponse;

public class YJFPayServiceImpl implements IPayService {

    Logger                                 logger = LoggerFactory
                                                      .getLogger(PayServiceFactory.class);

    private LoanPosCustomerService         loanPosCustomerService;

    private IReceiptManageBiz              receiptManageBiz;

    private IGenericConfigService          genericConfigService;

    private TReceiptInfo                   receipt;

    private TPaybackApplyInfo              paybackApply;

    private PayCollectQueryFacade          payCollectQueryFacade;

    private ChannelMapperDictionaryService channelMapperDictionaryService;

    private TransactionRelativeService     transactionRelativeService;

    /**
     * pay构造器
     * 
     * @param receipt
     */
    public YJFPayServiceImpl(TReceiptInfo receipt) {
        this.receipt = receipt;
    }

    /**
     * repay构造器
     * 
     * @param paybackApply
     */
    public YJFPayServiceImpl(TPaybackApplyInfo paybackApply) {
        this.paybackApply = paybackApply;
    }

    public TPaybackApplyInfo getPaybackApply() {
        return paybackApply;
    }

    public TReceiptInfo getReceipt() {
        return receipt;
    }

    /** 
     * @see com.hrbb.loan.pos.biz.bean.pay.IPayService#pay()
     */
    @Override
    public boolean pay() throws Exception {
        loanPosCustomerService = (LoanPosCustomerService) SpringBeans
            .getBean("loanPosCustomerService");
        receiptManageBiz = (IReceiptManageBiz) SpringBeans.getBean("receiptManageBiz");
        genericConfigService = (IGenericConfigService) SpringBeans.getBean("genericConfigService");
        payCollectQueryFacade = (PayCollectQueryFacade) SpringBeans
            .getBean("payCollectQueryFacade");
        channelMapperDictionaryService = (ChannelMapperDictionaryService) SpringBeans
            .getBean("channelMapperDictionaryService");
        transactionRelativeService = (TransactionRelativeService) SpringBeans
            .getBean("transactionRelativeService");
        return thirdPayment();
    }

    /** 
     * @see com.hrbb.loan.pos.biz.bean.pay.IPayService#repay()
     */
    @Override
    public boolean repay() throws Exception {
        return false;
    }

    /** 
     * @see com.hrbb.loan.pos.biz.bean.pay.IPayService#repayMap()
     */
    @Override
    public Map<String, Object> repayMap() throws Exception {
        loanPosCustomerService = (LoanPosCustomerService) SpringBeans
            .getBean("loanPosCustomerService");
        payCollectQueryFacade = (PayCollectQueryFacade) SpringBeans
            .getBean("payCollectQueryFacade");
        channelMapperDictionaryService = (ChannelMapperDictionaryService) SpringBeans
            .getBean("channelMapperDictionaryService");
        transactionRelativeService = (TransactionRelativeService) SpringBeans
            .getBean("transactionRelativeService");
        return thirdRepayment(paybackApply);
    }

    /**
     * 第三方支付付款 
     * 
     * @param receipt
     */
    private boolean thirdPayment() {
        TransactionLog tl = new TransactionLog(receipt.getReceiptId());

        TCustomer customer = loanPosCustomerService.getCustumerInfoById(receipt.getCustId());
        Map<String, Object> respMap = Maps.newHashMap();
        Map<String, Object> payMap = Maps.newHashMap();
        payMap.put("custName", receipt.getCustName());
        payMap.put("bankAccno", receipt.getPayAccount());
        payMap.put("paperId", customer.getPaperId());
        payMap.put("amount", receipt.getPayApplyAmt());
        TBankAccnoInfo bankAccnoInfo = loanPosCustomerService.getBanAccnoById(receipt
            .getPayAccount());
        payMap.put("bankName", bankAccnoInfo.getBankName());
        try {
            respMap = pay(payMap);

            if ("SUCCESS".equals(respMap.get("status"))) {
                logger.info("易极付代付成功");
                logger.info("更新借据[facilityId" + receipt.getReceiptId() + "]的放款序号:" + tl.getSeq());
                Map<String, Object> mapUpt = Maps.newHashMap();
                mapUpt.put("exeSeq", tl.getSeq());
                mapUpt.put("receiptId", receipt.getReceiptId());
                mapUpt.put("lendingChannel", "0");
                mapUpt.put("loanExecuteStatus", "20");
                mapUpt.put("lnExctStsUpdtTm", new Date());
                receiptManageBiz.updateReceiptInfo(mapUpt);
                return true;
            } else if ("FAIL".equals(respMap.get("status"))) {
                logger.info("易极付代付失败");
                Map<String, Object> mapUpt = Maps.newHashMap();
                mapUpt.put("exeSeq", tl.getSeq());
                mapUpt.put("receiptId", receipt.getReceiptId());
                mapUpt.put("lendingChannel", "0");
                mapUpt.put("loanExecuteStatus", "19");
                mapUpt.put("lnExctStsUpdtTm", new Date());
                receiptManageBiz.updateReceiptInfo(mapUpt);
                return false;
            } else if ("PROCESSING".equals(respMap.get("status"))) {
                logger.info("易极付代付处理中");
                Map<String, Object> mapUpt = Maps.newHashMap();
                mapUpt.put("exeSeq", tl.getSeq());
                mapUpt.put("receiptId", receipt.getReceiptId());
                mapUpt.put("lendingChannel", "0");
                mapUpt.put("loanExecuteStatus", "10");
                mapUpt.put("lnExctStsUpdtTm", new Date());
                receiptManageBiz.updateReceiptInfo(mapUpt);
                return true;
            }
        } catch (Exception e) {
            logger.error("易极付支付异常", e);
            Map<String, Object> mapUpt = Maps.newHashMap();
            mapUpt.put("exeSeq", tl.getSeq());
            mapUpt.put("receiptId", receipt.getReceiptId());
            mapUpt.put("lendingChannel", "0");
            mapUpt.put("loanExecuteStatus", "19");
            mapUpt.put("lnExctStsUpdtTm", new Date());
            receiptManageBiz.updateReceiptInfo(mapUpt);
            return false;
        } finally {
            /*记录交易日志*/
            tl.setRspTime();
            genericConfigService.insertTransactionLog(tl);
        }
        return false;
    }

    /**
     * 易极付代付
     * 
     * @param payMap
     * @return
     * @throws Exception
     */
    private Map<String, Object> pay(Map<String, Object> payMap) throws Exception {
        payCollectQueryFacade = (PayCollectQueryFacade) SpringBeans
            .getBean("payCollectQueryFacade");

        channelMapperDictionaryService = (ChannelMapperDictionaryService) SpringBeans
            .getBean("channelMapperDictionaryService");

        Map<String, Object> respMap = Maps.newHashMap();
        BillPCRequest request = new BillPCRequest();
        request.setProductCode(ProductCode.CASH_FLOW.getValue());//产品编号
        request.setAccName((String) payMap.get("custName"));//账户名
        request.setAccNum((String) payMap.get("bankAccno"));//账号
        request.setAccType(AccountType.DEBIT.getValue());//银行卡类型
        request.setCertType(CertType.CIVI_ID_CARD.getValue());//证件类型
        request.setCertNo((String) payMap.get("paperId"));//证件号
        request.setTransAmt(((BigDecimal) payMap.get("amount")).toString());
        request.setTransDate(DateUtil.getNowTime());
        String bankName = (String) payMap.get("bankName");
        Map<String, Object> bankReqMap = Maps.newHashMap();
        bankReqMap.put("type", "BankInfo");
        bankReqMap.put("channel", "YJF");
        bankReqMap.put("innerCode", bankName);
        List<Map<String, Object>> bankRespMap = channelMapperDictionaryService.getCode(bankReqMap);
        String outerCode = (String) bankRespMap.get(0).get("outerCode");
        request.setBankCode(outerCode);
        logger.info("开始 易极付扣,请求request=" + request);
        GenericResponse response = payCollectQueryFacade.pay(request);
        logger.info("完成 易极付代扣,返回response=" + response);
        TTransactionRelative tTransactionRelative =new TTransactionRelative();
        tTransactionRelative.setBusinessId(receipt.getReceiptId());
        tTransactionRelative.setRelativeId(response.getOrderNo());
        tTransactionRelative.setTransactionOpponent("YJF");
        tTransactionRelative.setTransactionStatus(response.getStatus());
        tTransactionRelative.setTransactionType(PayTypeEnum.PAY.getPayTypeCode());
        tTransactionRelative.setCreateTime(new Date());
        transactionRelativeService.saveTTransactionRelative(tTransactionRelative);
        respMap.put("status", response.getStatus());
        respMap.put("orderNo", response.getOrderNo());
        return respMap;
    }

    /**
     * 易极付代收
     * 
     * @param collectionMap
     * @return
     * @throws Exception
     */
    private Map<String, Object> collection(Map<String, Object> collectionMap) throws Exception {
        Map<String, Object> respMap = Maps.newHashMap();
        BillPCRequest request = new BillPCRequest();
        request.setProductCode(ProductCode.CASH_FLOW.getValue());//产品编号
        request.setAccName((String) collectionMap.get("custName"));//账户名
        request.setAccNum((String) collectionMap.get("bankAccno"));//账号
        request.setAccType(AccountType.DEBIT.getValue());//银行卡类型
        request.setCertType(CertType.CIVI_ID_CARD.getValue());//证件类型
        request.setCertNo((String) collectionMap.get("paperId"));//证件号
        request.setTransAmt(((BigDecimal) collectionMap.get("amount")).toString());
        request.setTransDate(DateUtil.getNowTime());
        String bankName = (String) collectionMap.get("bankName");
        Map<String, Object> bankReqMap = Maps.newHashMap();
        bankReqMap.put("type", "BankInfo");
        bankReqMap.put("channel", "YJF");
        bankReqMap.put("innerCode", bankName);
        List<Map<String, Object>> bankRespMap = channelMapperDictionaryService.getCode(bankReqMap);
        String outerCode = (String) bankRespMap.get(0).get("outerCode");
        request.setBankCode(outerCode);
        logger.info("开始 易极付代收,请求request=" + request);
        GenericResponse response = payCollectQueryFacade.collect(request);
        logger.info("完成 易极付代收,返回response=" + response);
        TTransactionRelative tTransactionRelative =new TTransactionRelative();
        tTransactionRelative.setBusinessId(paybackApply.getPaybackApplyId());
        tTransactionRelative.setRelativeId(response.getOrderNo());
        tTransactionRelative.setTransactionOpponent("YJF");
        tTransactionRelative.setTransactionStatus(response.getStatus());
        tTransactionRelative.setTransactionType(PayTypeEnum.PAY.getPayTypeCode());
        tTransactionRelative.setCreateTime(new Date());
        transactionRelativeService.saveTTransactionRelative(tTransactionRelative);
        respMap.put("status", response.getStatus());
        respMap.put("orderNo", response.getOrderNo());
        return respMap;
    }

    /**
     * 第三方支付，代扣
     * 
     * @param receipt
     * @return
     */
    private Map<String, Object> thirdRepayment(TPaybackApplyInfo paybackApply) {
        TCustomer customer = loanPosCustomerService.getCustumerInfoById(paybackApply.getCustId());
        Map<String, Object> resultMap = Maps.newHashMap();
        Map<String, Object> respMap = Maps.newHashMap();
        Map<String, Object> collectionMap = Maps.newHashMap();
        collectionMap.put("custName", customer.getCustName());
        collectionMap.put("bankAccno", paybackApply.getAccNo());
        collectionMap.put("paperId", customer.getPaperId());
        collectionMap.put("amount", paybackApply.getPaybackTotalAmount());
        TBankAccnoInfo bankAccnoInfo = loanPosCustomerService.getBanAccnoById(paybackApply
            .getAccNo());
        collectionMap.put("bankName", bankAccnoInfo.getBankName());
        try {
            respMap = collection(collectionMap);
            if ("SUCCESS".equals(respMap.get("status"))) {
                logger.info("易极付代扣成功");
                resultMap.put("resultCode", "SUCCESS");
                resultMap.put("resultMsg", "代扣成功");
                return resultMap;
            } else if ("FAIL".equals(respMap.get("status"))) {
                logger.info("易极付代扣失败");
                resultMap.put("resultCode", "FAIL");
                resultMap.put("resultMsg", "代扣失败");
                return resultMap;
            } else if ("PROCESSING".equals(respMap.get("status"))) {
                logger.info("处理中");
                resultMap.put("resultCode", "PROCESSING");
                resultMap.put("resultMsg", "代扣处理中");
                return resultMap;
            }
        } catch (Exception e) {
            logger.error("易极付代扣异常", e);
            resultMap.put("resultCode", "EXCEPTION");
            resultMap.put("resultMsg", "代扣处理异常");
            return resultMap;
        }
        return null;
    }
}
