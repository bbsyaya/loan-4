package com.hrbb.loan.controller;

import java.io.PrintWriter;
import java.text.ParseException;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.fastjson.JSONObject;
import com.google.common.collect.Maps;
import com.hrbb.loan.constants.PaymentApplyConstants;
import com.hrbb.loan.controller.helper.ControllerHelper;
import com.hrbb.loan.pos.biz.backstage.inter.ILoanPosBusinessCodeBiz;
import com.hrbb.loan.pos.biz.backstage.inter.IPaymentApplyBiz;
import com.hrbb.loan.pos.service.IGenericConfigService;
import com.hrbb.loan.pos.util.DateUtil;
import com.hrbb.loan.pos.util.StringUtil;

/**
 * 用款业务
 * 
 * @author jianQing
 * @version $Id: PaymentApplyController.java, v 0.1 2015年4月17日 下午2:35:56 jianQing Exp $
 */
@Controller
@RequestMapping("/paymentApply")
public class PaymentApplyController {
    private Logger logger = LoggerFactory.getLogger(PaymentApplyController.class);
    
    @Autowired
    private IPaymentApplyBiz paymentApplyBiz ;
    
    @Autowired
    private IGenericConfigService genericConfigService;
    
    @Autowired
    private ILoanPosBusinessCodeBiz loanPosBusinessCodeBiz;
    
    /**
     * 查詢用款申請
     * 
     * @param pageSize 页容量
     * @param pageNo   页码
     * @param request  请求
     * @param out  输出流
     * @return
     */
    @RequestMapping("/queryPaymentApply")
    public ModelAndView queryPaymentApply(
    		@RequestParam(value = "paymentStatus", required=false)String paymentStatus,
 		   	@RequestParam(value = "excuteStatus", required=false)String excuteStatus, 
            @RequestParam(value = "rows", required = false) Integer pageSize,
            @RequestParam(value = "page", required = false) Integer pageNo,
            HttpServletRequest request, PrintWriter out) {
        Map<String, Object> reqMap = Maps.newHashMap();
        //合同编号
        if (!StringUtils.isEmpty(request
                .getParameter(PaymentApplyConstants.CONTNO_LIKE))) {
            reqMap.put(PaymentApplyConstants.CONTNO_LIKE, ControllerHelper
                    .getLikeString(request
                            .getParameter(PaymentApplyConstants.CONTNO_LIKE)));
        }
        //商户名称
        if (!StringUtils.isEmpty(request
                .getParameter(PaymentApplyConstants.POS_CUST_NAME_LIKE))) {
            reqMap.put(PaymentApplyConstants.POS_CUST_NAME_LIKE, ControllerHelper
                    .getLikeString(request
                            .getParameter(PaymentApplyConstants.POS_CUST_NAME_LIKE)));
        }
        //客户名称
        if(!StringUtils.isEmpty(request
                .getParameter(PaymentApplyConstants.CUST_NAME_LIKE))){
            reqMap.put(PaymentApplyConstants.CUST_NAME_LIKE, ControllerHelper
                .getLikeString(request.getParameter(PaymentApplyConstants.CUST_NAME_LIKE)));
        
        // 证件号码
        if(!StringUtils.isEmpty(request
                .getParameter(PaymentApplyConstants.PAPER_ID_LIKE))){
            reqMap.put(PaymentApplyConstants.PAPER_ID_LIKE, ControllerHelper
                .getLikeString(request.getParameter(PaymentApplyConstants.PAPER_ID_LIKE)));}
        }
        
        if(!StringUtils.isEmpty(paymentStatus) && !paymentStatus.equals("99")){		//全量查询是不区分状态
	        // 申请状态
	        if(!StringUtils.isEmpty(request.getParameter("paymentStatus"))){
	            reqMap.put(PaymentApplyConstants.status,request.getParameter("paymentStatus"));
	        }
	        // 放款状态
	        if(!StringUtils.isEmpty(request.getParameter("excuteStatus"))){
	            reqMap.put("excuteStatus",request.getParameter("excuteStatus"));
	        }
        }
        reqMap.put("startPage", (pageNo - 1) * pageSize);
        reqMap.put("pageSize", pageSize);
        List<Map<String, Object>> lists = paymentApplyBiz.queryPaymentApply(reqMap);
        JSONObject aaJson = new JSONObject();
        if(lists != null && lists.size()>0){
            //获取总数map
            Map<String,Object> map = lists.get(lists.size()-1);
            lists.remove(lists.size()-1);
            aaJson.put("rows", lists);
            aaJson.put("total", map.get("total"));
        }else{
            aaJson.put("rows", lists);
            aaJson.put("total", 0);
        }
        out.write(aaJson.toJSONString());  
        return null;
    }
    
    
    /**
     * 增加用款申请
     * 
     * @param request
     * @param out
     * @return
     */
    @RequestMapping("/savePaymentApply")
    public ModelAndView savePaymentApply(HttpServletRequest request, PrintWriter out) {
        //合同号
        String contNo = request.getParameter(PaymentApplyConstants.contNo);
        //用款金额
        String payApplyAmt = request.getParameter(PaymentApplyConstants.payApplyAmt);
        //用款期限
        String payApplyTerm = request.getParameter(PaymentApplyConstants.payApplyTerm);
        //用款利率
        String payApplyInterest = request.getParameter(PaymentApplyConstants.payApplyInterest);
        //期待用款日期
        String expectedDate = request.getParameter(PaymentApplyConstants.expectedDate);
        //期待用款结束日
        String expectedEndDate = request.getParameter(PaymentApplyConstants.expectedEndDate);
        //还款方式
        String returnType = request.getParameter(PaymentApplyConstants.returnType);
        //用款账号
        String accNo = request.getParameter(PaymentApplyConstants.accNo);
        Map<String, Object> reqMap = Maps.newHashMap();
        if(!StringUtils.isEmpty(contNo)){
            reqMap.put(PaymentApplyConstants.contNo, contNo);
        }
        if(!StringUtils.isEmpty(payApplyAmt)){
            reqMap.put(PaymentApplyConstants.payApplyAmt, payApplyAmt);
        }
        if(!StringUtils.isEmpty(payApplyTerm)){
            reqMap.put(PaymentApplyConstants.payApplyTerm, payApplyTerm);
        }
        if(!StringUtils.isEmpty(payApplyInterest)){
            reqMap.put(PaymentApplyConstants.payApplyInterest, payApplyInterest);
        }
        if(!StringUtils.isEmpty(expectedDate)){
            reqMap.put(PaymentApplyConstants.expectedDate, expectedDate);
        }
        if(!StringUtils.isEmpty(expectedEndDate)){
            reqMap.put(PaymentApplyConstants.expectedEndDate, expectedEndDate);
        }
        if(!StringUtils.isEmpty(returnType)){
            reqMap.put(PaymentApplyConstants.returnType, returnType);
        }
        if(!StringUtils.isEmpty(accNo)){
            reqMap.put(PaymentApplyConstants.accNo, accNo);
        }
        try{
            paymentApplyBiz.insertPaymentApplyZJ(reqMap);
            out.print("新增用款申请成功");
        } catch (Exception e) {
            logger.error("新增用款申请异常" , e);
            out.print("新增用款申请失败,系统异常！");
        }
        return null;
    }
    /**
     * 提交用款审核
     * 
     * @param payApplyId
     * @param out
     * @return
     */
    @RequestMapping("/submitPaymentApply")
    public ModelAndView submitPaymentApply(@RequestParam(value="payApplyId",required=false) String payApplyId,PrintWriter out){
        Map<String, Object> reqMap = Maps.newHashMap();
        reqMap.put("payApplyId", payApplyId);
        reqMap.put("status", "10");
        try {
            paymentApplyBiz.updatePaymentApply(reqMap);
            out.print("提交审核成功");
        } catch (Exception e) {
            logger.error("用款提交失败", e);
            out.print("用款提交审核失败");
        }
        return null;
        
    }
    /**
     * 取消用款
     * 
     * @param cancelPayApplyId
     * @param out
     * @return
     */
    @RequestMapping("/cancelPaymentApply")
    public ModelAndView cancelPaymentApply(@RequestParam(value="cancelPayApplyId",required=false)String cancelPayApplyId,PrintWriter out){
        Map<String, Object> reqMap = Maps.newHashMap();
        reqMap.put("payApplyId", cancelPayApplyId);
        reqMap.put("status", "93");
        try {
            paymentApplyBiz.updatePaymentApply(reqMap);
            out.print("取消用款成功");
        } catch (Exception e) {
            logger.error("取消用款失败", e);
            out.print("取消用款失败");
        }
        return null;
    }
    
    /**
     * 计算日期
     * 
     * @param expectedDate
     * @param payApplyTerm
     * @param out
     * @return
     */
    @RequestMapping("/calculateDate")
    public ModelAndView calculateDate(@RequestParam(value="expectedDate",required=false)String expectedDate,
                                      @RequestParam(value="payApplyTerm",required=false)int payApplyTerm,
                                      PrintWriter out){
        if(!StringUtil.isEmpty(expectedDate) && payApplyTerm > 0){
            try {
                String expectedEndDate = DateUtil.getRelativeDate(expectedDate, 0, payApplyTerm, -1);
                //加入对周末和节假日的延后处理 add by Lin,Zhaolin at 2015-5-27
                String workingDate = genericConfigService.getNextWorkingDate(DateUtil.parse2Date(expectedEndDate));
                
                out.print(workingDate);
            } catch (ParseException e) {
                logger.error("日期转换错误", e);
                return null;
            }
        }
        return null;
    }
    
    /**
     * 查詢用款申請
     * 
     * @param pageSize 页容量
     * @param pageNo   页码
     * @param request  请求
     * @param out  输出流
     * @return
     */
    @RequestMapping("/queryAvailableClaimPaymentApply")
    public ModelAndView queryAvailableClaimPaymentApply(
            @RequestParam(value = "rows", required = false) Integer pageSize,
            @RequestParam(value = "page", required = false) Integer pageNo,
            HttpServletRequest request, PrintWriter out) {
        Map<String, Object> reqMap = Maps.newHashMap();
        //合同编号
        if (!StringUtils.isEmpty(request
                .getParameter(PaymentApplyConstants.CONTNO_LIKE))) {
            reqMap.put(PaymentApplyConstants.CONTNO_LIKE, ControllerHelper
                    .getLikeString(request
                            .getParameter(PaymentApplyConstants.CONTNO_LIKE)));
        }
        //商户名称
        if (!StringUtils.isEmpty(request
                .getParameter(PaymentApplyConstants.POS_CUST_NAME_LIKE))) {
            reqMap.put(PaymentApplyConstants.POS_CUST_NAME_LIKE, ControllerHelper
                    .getLikeString(request
                            .getParameter(PaymentApplyConstants.POS_CUST_NAME_LIKE)));
        }
        //客户名称
        if(!StringUtils.isEmpty(request
                .getParameter(PaymentApplyConstants.CUST_NAME_LIKE))){
            reqMap.put(PaymentApplyConstants.CUST_NAME_LIKE, ControllerHelper
                .getLikeString(request.getParameter(PaymentApplyConstants.CUST_NAME_LIKE)));
        
        //证件号码
        if(!StringUtils.isEmpty(request
                .getParameter(PaymentApplyConstants.PAPER_ID_LIKE))){
            reqMap.put(PaymentApplyConstants.PAPER_ID_LIKE, ControllerHelper
                .getLikeString(request.getParameter(PaymentApplyConstants.PAPER_ID_LIKE)));}
        }
        if(!StringUtils.isEmpty(request.getParameter("paymentStatus"))){
            reqMap.put(PaymentApplyConstants.status,request.getParameter("paymentStatus"));
        }
        reqMap.put("startPage", (pageNo - 1) * pageSize);
        reqMap.put("pageSize", pageSize);
        List<Map<String, Object>> lists = paymentApplyBiz.queryAvailablePaymentApply(reqMap);
        JSONObject aaJson = new JSONObject();
        if(lists != null && lists.size()>0){
            //获取总数map
            Map<String,Object> map = lists.get(lists.size()-1);
            lists.remove(lists.size()-1);
            aaJson.put("rows", lists);
            aaJson.put("total", map.get("total"));
        }else{
            aaJson.put("rows", lists);
            aaJson.put("total", 0);
        }
        out.write(aaJson.toJSONString());  
        return null;
    }
    
}

