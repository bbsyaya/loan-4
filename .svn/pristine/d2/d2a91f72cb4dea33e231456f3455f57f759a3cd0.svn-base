package com.hrbb.loan.pos.biz.backstage.inter.impl;

import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.google.common.collect.Maps;
import com.hrbb.loan.pos.biz.backstage.inter.LoanPosPaybackApplyBiz;
import com.hrbb.loan.pos.dao.entity.TPaybackApplyInfo;
import com.hrbb.loan.pos.dao.entity.TReceiptInfo;
import com.hrbb.loan.pos.service.LoanPosPaybacApplykService;
import com.hrbb.loan.pos.service.LoanPosPaybackService;
import com.hrbb.loan.pos.util.DateUtil;

@Component("loanPosPaybackApplyBiz")
public class LoanPosPaybackApplyBizImpl implements LoanPosPaybackApplyBiz {
	@Autowired
	private LoanPosPaybacApplykService loanPosPaybackApplyService;
	@Autowired
	private LoanPosPaybackService loanPosPaybackService;
	@Override
	public List<TPaybackApplyInfo> queryPaybackApplyInfo(
			Map<String, Object> reqMap) {
		List<TPaybackApplyInfo> l =  loanPosPaybackApplyService.getPaybackApplyMap(reqMap);
//		for(TPaybackApplyInfo r:l){
//			if(r.getExpectPaybackDate()!=null){
//				r.setExpectPaybackDateStr(DateUtil.getDateToString3(r.getExpectPaybackDate()));
//			}
//		}
		return l;
	}

	@Override
	public int updatePaybackStatus(Map<String, Object> updateMap) {
		return loanPosPaybackApplyService.updatePaybackStatus(updateMap);
	}

    @Override
    public List<Map<String, Object>> queryPaybackDetailsByMaps(Map<String, Object> map) {
        return loanPosPaybackApplyService.queryPaybackDetailsByMaps(map);
    }

    @Override
    public List<Map<String, Object>> queryPaybackDetailsBySlApp(Map<String, Object> map) {
        return loanPosPaybackApplyService.queryPaybackDetailsBySlApp(map);
    }
    
    /**
	 * 校验还款申请合法性
	 * @param receiptId
	 * @param expectPaybackDate
	 * @param paybackPrincipal
	 * @param paybackInterest
	 * @param paybackTotalAmount
	 * @return
	 */
	public Map<String,Object> validatePaybackApply(TReceiptInfo receipt,Date expectPaybackDate,BigDecimal paybackPrincipal,BigDecimal paybackInterest,BigDecimal paybackTotalAmount){
		Map<String,Object> vResult = Maps.newHashMap();
		
		
		/*还款金额校验*/
		if(paybackTotalAmount.compareTo(paybackPrincipal.add(paybackInterest))!=0){
			vResult.put("returnCode", "901");
			vResult.put("returnMsg", "还款总额不等于还款本金与还款利息之和");
			return vResult;
		}
		
		if(paybackPrincipal.compareTo(receipt.getLoanTotalBalance())>0){
			vResult.put("returnCode", "902");
			vResult.put("returnMsg", "还款本金超过贷款余额");
			return vResult;
		}
		
		/*剩下可还贷款余额校验: 刨除当天多次还款的情况*/
		Map<String,Object> reqMap = Maps.newHashMap();
		reqMap.put("receiptId", receipt.getReceiptId());
		reqMap.put("paybackApplyDate", new Date());
		reqMap.put("flagTodo", "Y");
		List<TPaybackApplyInfo> records = loanPosPaybackService.queryPaybackApplyList(reqMap);
		if(records!=null && records.size()>0){
			BigDecimal onloadApply = new BigDecimal("0");
			for(TPaybackApplyInfo apply: records){
				onloadApply = onloadApply.add(apply.getPaybackAmount());
			}
			/*累计还款金额超出贷款余额*/
			if((onloadApply.add(paybackPrincipal)).compareTo(receipt.getLoanTotalBalance())>0){
				vResult.put("returnCode", "904");
				vResult.put("returnMsg", "当日累计还款金额("+onloadApply+"+"+paybackPrincipal+")超出贷款余额.");
				return vResult;
			}
		}
		
		if(expectPaybackDate!=null){
			String paybackDate = DateUtil.formatDate(expectPaybackDate, DateUtil.HRRB_SHORT_DATETIME_FORMAT);
			if(paybackDate.compareTo(DateUtil.getToday())<0){
				vResult.put("returnCode", "903");
				vResult.put("returnMsg", "期望还款日期不能小于当前日期");
				return vResult;
			}
		}
		
		vResult.put("returnCode", "000");
		vResult.put("returnMsg", "SUCCESS");
		return vResult;
	}
}
