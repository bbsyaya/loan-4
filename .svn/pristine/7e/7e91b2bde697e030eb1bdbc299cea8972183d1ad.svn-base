package com.hrbb.loan.spi.SALE;

import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.common.collect.Maps;
import com.hrbb.loan.acct.facade.MadeLoanProcessBizHession;
import com.hrbb.loan.acct.facade.bean.CalcRamtReq;
import com.hrbb.loan.acct.facade.bean.CalcRamtRes;
import com.hrbb.loan.channel.user.UserProcesser;
import com.hrbb.loan.pos.dao.entity.TReceiptInfo;
import com.hrbb.loan.pos.service.ReceiptInfoService;
import com.hrbb.loan.pos.util.MapUtils;
import com.hrbb.loan.pos.util.SignUtil;
import com.hrbb.loan.pos.util.StringUtil;
import com.hrbb.loan.pos.util.ValidateUtil;
import com.hrbb.loan.spiconstants.HServiceReturnCode;
import com.hrbb.loan.spiconstants.PaymentApplyHServiceConstants;
import com.hrbb.sh.framework.HRequest;
import com.hrbb.sh.framework.HResponse;
import com.hrbb.sh.framework.HService;
import com.hrbb.sh.framework.HServiceException;

/**
 * SL0008: 消费贷 还款试算服务接口.
 * 
 * @author xiongshaogang
 * @version $Id: ZzSaleAppRepaymentTryCalculateServiceImpl.java, v 0.1 2015年4月29日 下午1:36:59 xiongshaogang Exp $
 */
@Service("zzSaleAppRepaymentTryCalculate")
public class ZzSaleAppRepaymentTryCalculateServiceImpl implements HService {
    
	Logger logger = LoggerFactory.getLogger(ZzSaleAppRepaymentTryCalculateServiceImpl.class);
	
	@Autowired
	private ReceiptInfoService receiptInfoService;
	
	@Autowired
    private MadeLoanProcessBizHession madeLoanProcessBizHession;
	
	@Resource(name="userProcesser")
    private UserProcesser userProcesser;
	
	@Override
	public HResponse serve(HRequest request) throws HServiceException {
	    
	    logger.debug("in ZzSaleAppRepaymentTryCalculateServiceImpl...");
	    
        // 0. 接收请求包，解包
        Map<String, String> headerMap = (Map<String, String>) request.getProperties().get("HrbbHeader");
        Map<String, String> bodyMap = (Map<String, String>) request.getProperties().get("HrbbBody");
        logger.info("headerMap : " + MapUtils.toString(headerMap));
        logger.info("bodyMap : " + MapUtils.toString(bodyMap));
        
        // 1. 请求包校验
        HResponse resp = new HResponse();
        if (!validate(headerMap, bodyMap, resp)) {
            resp.setRespTime(new Date());
            return getBlankHResponse(resp, headerMap, bodyMap);
        }

        // 2. 验证数字签名,暂不实现
        String signedMsg = SignUtil.getSignMsg((Map<String, Object>)request.getProperties().get("HrbbBody"), null);
        logger.info("请求待签名串 signedMsg = [" + signedMsg + "]");
//        if (!SignUtil.verifySign(SignUtil.MD5_ALG, signedMsg, headerMap.get("Mac"), SignUtil.getProperty("app_posloan_signkey"))) {
//            logger.error("数字签名验证失败");
//            bodyMap.put("respcode", HServiceReturnCode.OTHER_ERROR.getReturnCode());
//            bodyMap.put("respmsg", HServiceReturnCode.OTHER_ERROR.getReturnMessage());
//            resp.setRespCode(HServiceReturnCode.OTHER_ERROR.getReturnCode());
//            resp.setRespMessage(HServiceReturnCode.OTHER_ERROR.getReturnMessage());
//            resp.setRespTime(new Date());
//            return getBlankHResponse(resp, headerMap, bodyMap);
//        }
        logger.info("数字签名验证通过!");
        
        // 3. 查询借据
        TReceiptInfo tReceiptInfo = receiptInfoService.selectReceiptOne(bodyMap.get("payapplyid"));
        if (tReceiptInfo == null) {
//        if (tReceiptInfo == null || StringUtil.isEmpty(tReceiptInfo.getLoanAcNo())) {
            logger.error("试算接口异常，借据不存在!");
            bodyMap.put("respcode", HServiceReturnCode.LISTID_REPAY_ERROR.getReturnCode());
            bodyMap.put("respmsg", HServiceReturnCode.LISTID_REPAY_ERROR.getReturnMessage());
            resp.setRespCode(HServiceReturnCode.LISTID_REPAY_ERROR.getReturnCode());
            resp.setRespMessage(HServiceReturnCode.LISTID_REPAY_ERROR.getReturnMessage());
            resp.setRespTime(new Date());
            return getBlankHResponse(resp, headerMap, bodyMap);
        }
	    
	    // 4. 试算
        CalcRamtReq calcRamtReq = new CalcRamtReq(); 
        // 暂时写死
        calcRamtReq.setLoanAcNo(tReceiptInfo.getLoanAcNo());
        
        // 操作员信息，暂时参照学生贷
        calcRamtReq.setOprId("680199");
        calcRamtReq.setOprName("");
        
        /**
         *  <select name="aheakind" desc="提前还款类型">
                <option value="1" text="还本付息" />
                <option value="2" text="提前结清" />
                <option value="3" text="提前还本" />
            </select>
         */
        if ("01".equals(bodyMap.get(PaymentApplyHServiceConstants.aheakind))) {
            calcRamtReq.setAheakind("2");
        } else if ("02".equals(bodyMap.get(PaymentApplyHServiceConstants.aheakind))) {
            calcRamtReq.setAheakind("1");
        } else {
            logger.error("试算接口异常,暂不支持！");
            bodyMap.put("respcode", HServiceReturnCode.NO_SUPPORT_ERROR.getReturnCode());
            bodyMap.put("respmsg", HServiceReturnCode.NO_SUPPORT_ERROR.getReturnMessage());
            resp.setRespCode(HServiceReturnCode.NO_SUPPORT_ERROR.getReturnCode());
            resp.setRespMessage(HServiceReturnCode.NO_SUPPORT_ERROR.getReturnMessage());
            resp.setRespTime(new Date());
            return getBlankHResponse(resp, headerMap, bodyMap);
        }
        
        // POS贷 固定：POS
        calcRamtReq.setChannelId("POS");
        // 还款总金额
        calcRamtReq.setSsubsamt(Double.parseDouble(bodyMap.get(PaymentApplyHServiceConstants.sumamt)));
        logger.info("核算平台 还款试算请求报文 = [" + calcRamtReq.toString() + "]");
        CalcRamtRes calcRamtRes = madeLoanProcessBizHession.calcRAmt(calcRamtReq);
        if (calcRamtRes == null) {
            logger.error("核算平台 试算接口异常，无应答返回!");
            bodyMap.put("respcode", HServiceReturnCode.OTHER_ERROR.getReturnCode());
            bodyMap.put("respmsg", HServiceReturnCode.OTHER_ERROR.getReturnMessage());
            resp.setRespCode(HServiceReturnCode.OTHER_ERROR.getReturnCode());
            resp.setRespMessage(HServiceReturnCode.OTHER_ERROR.getReturnMessage());
            resp.setRespTime(new Date());
            return getBlankHResponse(resp, headerMap, bodyMap);
        }
        
        /**
         *  rcapi: 提前归还本金
            rInte:提前归还利息
            sAlloInte:贴息金额
            OtherKillAmt:其他抵扣金额
            sSubsInte:扣收利息
            rfoul:违约金
            sSubsAmt:扣收金额
            newamt:分期还款额
            SumAmt:实还金额
            clew:
            sTerm//当前期次
            scTerm//当前期次[理论]
            cTerm//贷款期数[理论
            sTermNum//理论，当前第几期？
             sRepayDate //应还款日期
             rRepayDate //实际还款日期 
         * 
         * @return
         */
        Map<String,Object> resMap = calcRamtRes.getRes();
        if (resMap == null || resMap.size() < 0) {
            logger.error("核算平台 试算接口异常，无应答返回!");
            bodyMap.put("respcode", HServiceReturnCode.OTHER_ERROR.getReturnCode());
            bodyMap.put("respmsg", HServiceReturnCode.OTHER_ERROR.getReturnMessage());
            resp.setRespCode(HServiceReturnCode.OTHER_ERROR.getReturnCode());
            resp.setRespMessage(HServiceReturnCode.OTHER_ERROR.getReturnMessage());
            resp.setRespTime(new Date());
            return getBlankHResponse(resp, headerMap, bodyMap);
        }
        logger.info("核算平台 还款试算应答报文 = [" + MapUtils.toString(resMap) + "]");
        
        // 5. 组装应答数据
        // 5. 1 归还利息
        bodyMap.put("rinte", (String)resMap.get("rInte"));
        // 5. 2 归还本金
        bodyMap.put("rcapi", (String)resMap.get("rcapi"));
        // 5. 3 提前还款总金额
        bodyMap.put("sumamt", (String)resMap.get("SumAmt"));
        
        // 6. 成功应答
        Map<String, Object> rootMap = Maps.newHashMap();
        bodyMap.put("respcode", HServiceReturnCode.SUCCESS.getReturnCode());
        bodyMap.put("respmsg", HServiceReturnCode.SUCCESS.getReturnMessage());
        
        // 6.1 签名处理
        Map<String, Object> signMap = Maps.newHashMap();
        for (Iterator<String> it = bodyMap.keySet().iterator(); it.hasNext();) {
            String key = it.next();
            signMap.put(key, bodyMap.get(key));
        }
        headerMap.put("Mac", sign(signMap, null));
        
        rootMap.put("HrbbHeader", headerMap);
        rootMap.put("HrbbBody", bodyMap);
        resp.setRespCode(HServiceReturnCode.SUCCESS.getReturnCode());
        resp.setRespMessage(HServiceReturnCode.SUCCESS.getReturnMessage());
        resp.setRespTime(new Date());
        resp.setProperties(rootMap);
        logger.info("回写数据: " + resp.toString());
        logger.debug("out ZzSaleAppRepaymentTryCalculateServiceImpl...");
        return resp;
	    
	}
	
	/**
     * 请求包校验处理.
     * 
     * @param headerMap
     * @param bodyMap
     * @return
     * @throws Exception 
     */
    private boolean validate(Map<String, String> headerMap, Map<String, String> bodyMap,
                             HResponse resp) throws HServiceException {
        // 版本号
        if (StringUtil.isEmpty(headerMap.get("Version"))
            || !"20150415".equals(headerMap.get("Version"))) {
            logger.error("接口版本号为空或不合法:[]", headerMap.get("Version"));
            bodyMap.put("respcode", HServiceReturnCode.VERSION_ERRO_ERROR.getReturnCode());
            bodyMap.put("respmsg", HServiceReturnCode.VERSION_ERRO_ERROR.getReturnMessage());
            resp.setRespCode(HServiceReturnCode.VERSION_ERRO_ERROR.getReturnCode());
            resp.setRespMessage(HServiceReturnCode.VERSION_ERRO_ERROR.getReturnMessage());
            return false;
        }
        
        // 用款申请编号
        if (StringUtil.isEmpty(bodyMap.get("payapplyid"))) {
            logger.error("用款申请编号为空或不合法:[]", bodyMap.get("payapplyid"));
            bodyMap.put("respcode", HServiceReturnCode.PAYAPPLYID_ERROR.getReturnCode());
            bodyMap.put("respmsg", HServiceReturnCode.PAYAPPLYID_ERROR.getReturnMessage());
            resp.setRespCode(HServiceReturnCode.PAYAPPLYID_ERROR.getReturnCode());
            resp.setRespMessage(HServiceReturnCode.PAYAPPLYID_ERROR.getReturnMessage());
            return false;
        }
        
        // 提前还款类型
        if (StringUtil.isEmpty(bodyMap.get("aheakind"))
            || "01|02".indexOf(bodyMap.get("aheakind")) < 0) {
            logger.error("提前还款类型为空或不合法:[]", bodyMap.get("aheakind"));
            bodyMap.put("respcode", HServiceReturnCode.AHEAKIND_ERRO_ERROR.getReturnCode());
            bodyMap.put("respmsg", HServiceReturnCode.AHEAKIND_ERRO_ERROR.getReturnMessage());
            resp.setRespCode(HServiceReturnCode.AHEAKIND_ERRO_ERROR.getReturnCode());
            resp.setRespMessage(HServiceReturnCode.AHEAKIND_ERRO_ERROR.getReturnMessage());
            return false;
        }
        
        // 归还本金
        if (StringUtil.isEmpty(bodyMap.get("rcapi"))
            || !ValidateUtil.checkDouble(bodyMap.get("rcapi"))) {
            logger.error("归还本金为空或不合法:[]", bodyMap.get("rcapi"));
            bodyMap.put("respcode", HServiceReturnCode.RCAPI_ERRO_ERROR.getReturnCode());
            bodyMap.put("respmsg", HServiceReturnCode.RCAPI_ERRO_ERROR.getReturnMessage());
            resp.setRespCode(HServiceReturnCode.RCAPI_ERRO_ERROR.getReturnCode());
            resp.setRespMessage(HServiceReturnCode.RCAPI_ERRO_ERROR.getReturnMessage());
            return false;
        }
        
        // 还款总金额
        if (StringUtil.isEmpty(bodyMap.get("sumamt"))
            || !ValidateUtil.checkDouble(bodyMap.get("sumamt"))) {
            logger.error("还款总金额为空或不合法:[]", bodyMap.get("sumamt"));
            bodyMap.put("respcode", HServiceReturnCode.SUMAMT_ERROR.getReturnCode());
            bodyMap.put("respmsg", HServiceReturnCode.SUMAMT_ERROR.getReturnMessage());
            resp.setRespCode(HServiceReturnCode.SUMAMT_ERROR.getReturnCode());
            resp.setRespMessage(HServiceReturnCode.SUMAMT_ERROR.getReturnMessage());
            return false;
        }

        return true;
    }

    /**
     * 失败应答.
     * 
     * @param response
     * @return
     */
    private HResponse getBlankHResponse(HResponse response, Map<String, String> headerMap, Map<String, String> bodyMap) {
        Map<String, Object> respMap = Maps.newHashMap();
        bodyMap.put(PaymentApplyHServiceConstants.payapplyid, "");
        bodyMap.put(PaymentApplyHServiceConstants.aheakind, "");
        bodyMap.put("rcapi", "");
        bodyMap.put("rinte", "");
        bodyMap.put(PaymentApplyHServiceConstants.sumamt, "");
        
        // 5.1 签名处理
        Map<String, Object> signMap = Maps.newHashMap();
        for (Iterator<String> it = bodyMap.keySet().iterator(); it.hasNext();) {
            String key = it.next();
            signMap.put(key, bodyMap.get(key));
        }
        headerMap.put("Mac", sign(signMap, null));
        
        respMap.put("HrbbHeader", headerMap);
        respMap.put("HrbbBody", bodyMap);
        response.setProperties(respMap);
        return response;
    }
    
    /**
     * 回写签名处理.
     * 
     * @param signMap
     * @param ignoreSet
     * @return
     */
    private String sign(Map<String, Object> signMap, Set<String> ignoreSet) {
        String signedMsg = SignUtil.getSignMsg(signMap, ignoreSet);
        logger.info("应答待签名串 signedMsg = [" + signedMsg + "]");
        String signRet = SignUtil.sign(SignUtil.MD5_ALG, signedMsg, SignUtil.getProperty("app_posloan_signkey"));
        logger.info("应答签名 Mac = [" + signRet + "]");
        return signRet;
    }
}
