/**
 * 
 *	哈尔滨银行
 * Copyright (c) 2007-2015 HRBB,Inc.All Rights Reserved.
 */
package com.hrbb.loan.pos.biz.expressions.mult;

import java.math.BigDecimal;

import org.springframework.util.StringUtils;

import com.hrbb.loan.pos.biz.expressions.bean.MultResultBean;
import com.hrbb.loan.pos.dao.entity.TRiskCheckCalcIndex;
import com.hrbb.loan.pos.dao.entity.TRiskCheckModelIndex;
import com.hrbb.loan.pos.biz.constants.RiskCheckConstants;
import com.hrbb.loan.pos.util.MathUtils;

/**
 * 1.3.2.4 贷款定价建议
 * 
 * @author XLY
 * @version $Id: LoanPricingComputer.java, v 0.1 2015-3-10 下午3:09:21 XLY Exp $
 */
public class LoanPricingComputer {

	public static BigDecimal computer(MultResultBean multResultBean,
			TRiskCheckModelIndex mb, TRiskCheckCalcIndex cib, String certNo,
			String mateCertNo) {
		return computer(multResultBean, new BigDecimal(mb.getModelIndex20()),
				cib.getCalcIndex05(), cib.getCalcIndex06(),
				cib.getCalcIndex07(), cib.getCalcIndex04(), certNo, mateCertNo);
	}

	/**
	 * 
	 * 1.2.2.4 贷款定价建议
	 * 
	 * @param multResultBean
	 * @param modelIndex20
	 * @param calcIndex05
	 * @param calcIndex10k
	 * @param calcIndex06
	 * @param calcIndex07
	 * @param certNo
	 * @param channel
	 * @return
	 */
	public static BigDecimal computer(MultResultBean multResultBean,
			BigDecimal modelIndex20, String calcIndex05, String calcIndex06,
			String calcIndex07, String calcIndex04, String certNo,
			String mateCertNo) {
		BigDecimal n1 = (new BigDecimal(0.0031)).multiply(
				multResultBean.getFinalModelScore()).subtract(
				new BigDecimal(0.4266));

		double pb1 = Math.exp((new BigDecimal(1)).divide(n1, 6,
				BigDecimal.ROUND_HALF_UP).doubleValue());

		BigDecimal n2 = (new BigDecimal(-0.0097).multiply(modelIndex20))
				.add(new BigDecimal(-0.1189));
		double n3 = (new BigDecimal(1)).divide(n2, 6, BigDecimal.ROUND_HALF_UP)
				.doubleValue();
		double pb2 = Math.exp(n3);

		BigDecimal pb3 = BigDecimal.ZERO;
		if (RiskCheckConstants.Y.equals(calcIndex05)) {
			pb3 = pb3.add(BigDecimal.ONE);
		}
		if (RiskCheckConstants.Y.equals(calcIndex06)) {
			pb3 = pb3.add(BigDecimal.ONE);
		}
		if (RiskCheckConstants.Y.equals(calcIndex07)) {
			pb3 = pb3.add(BigDecimal.ONE);
		}
		if (RiskCheckConstants.Y.equals(calcIndex04)) {
			pb3 = pb3.add(BigDecimal.ONE);
		}
		// BigDecimal pb3 =
		// calcIndex07.add(calcIndex06).add(calcIndex10).add(calcIndex05);
		BigDecimal pb4 = BigDecimal.ZERO;
		if (RiskCheckConstants.paperId_3303.equals(certNo.substring(0, 4))) {
			pb4 = pb4.add(new BigDecimal(0.02));
		} else {
			if (!StringUtils.isEmpty(mateCertNo)
					&& RiskCheckConstants.paperId_3303.equals(mateCertNo
							.substring(0, 4))) {
				pb4 = pb4.add(new BigDecimal(0.02));
			}
		}
		// BigDecimal pb4 = "3303".equals(certNo.substring(0, 4)) ? new
		// BigDecimal(
		// 0.02) : BigDecimal.ZERO;

		BigDecimal base1 = new BigDecimal(0.11).add(new BigDecimal(pb1))
				.add(new BigDecimal(pb2)).add(pb3).add(pb4);
		Integer base2 = base1.divide(new BigDecimal(0.005), 0,
				BigDecimal.ROUND_HALF_UP).intValue();
		// if (ChannelConstants.CH_QM.equals(channel)) {
		// BigDecimal base3 = MathUtils.getMax(MathUtils.getMin(
		// new BigDecimal(base2 * 0.005), new BigDecimal(0.24)),
		// new BigDecimal(0.11));
		// return base3;
		// } else {
		BigDecimal base3 = MathUtils.getMax(MathUtils.getMin(new BigDecimal(
				base2 * 0.005), new BigDecimal(0.21)), new BigDecimal(0.11));
		return base3.setScale(4, BigDecimal.ROUND_HALF_UP);
		// }

	}
}
