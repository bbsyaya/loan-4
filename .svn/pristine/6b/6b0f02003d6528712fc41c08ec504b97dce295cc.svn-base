package com.hrbb.loan.controller;

import java.io.PrintWriter;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import jodd.util.StringUtil;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.fastjson.JSONObject;
import com.google.common.collect.Maps;
import com.hrbb.loan.pos.biz.backstage.inter.ILoanPosBusinessCodeBiz;
import com.hrbb.loan.pos.dao.entity.TBdExecutor;
import com.hrbb.loan.pos.dao.entity.TBdInstitution;
import com.hrbb.loan.pos.service.BDManagementService;

/**
 * 展业机构管理
 * 
 * @author cjq
 * @version $Id: BDManagementController.java, v 0.1 2015年9月10日 下午2:21:11 cjq Exp $
 */
@Controller
@RequestMapping("/bdManagement")
public class BDManagementController {

    private Logger                  logger = LoggerFactory.getLogger(BDManagementController.class);

    @Autowired
    private BDManagementService     bdManagementService;

    @Autowired
    private ILoanPosBusinessCodeBiz loanPosBusinessCodeBiz;

    /**
     * 展业机构列表
     * 
     * @param pageSize
     * @param pageNo
     * @param request
     * @param out
     * @return
     */
    @RequestMapping("/queryBDInstitution")
    public ModelAndView queryBDInstitution(@RequestParam(value = "rows", required = false) Integer pageSize,
                                           @RequestParam(value = "page", required = false) Integer pageNo,
                                           HttpServletRequest request, PrintWriter out) {
        Map<String, Object> reqMap = Maps.newHashMap();
        reqMap.put("startPage", (pageNo - 1) * pageSize);
        reqMap.put("limit", pageSize);
        List<TBdInstitution> lists = bdManagementService.queryTbdInstitutions(reqMap);
        long total = bdManagementService.countTbdInstitutions(reqMap);
        JSONObject json = new JSONObject();
        if (null != lists && lists.size() > 0) {
            json.put("total", total);
            json.put("rows", lists);
        } else {
            json.put("total", 0);
            json.put("rows", lists);
        }
        out.write(json.toJSONString());
        return null;
    }

    /**
     * 展业人员类列表
     * 
     * @param pageSize
     * @param pageNo
     * @param belongOrg
     * @param request
     * @param out
     * @return
     */
    @RequestMapping("/queryBDExecutor")
    public ModelAndView queryBDExecutor(@RequestParam(value = "rows", required = false) Integer pageSize,
                                        @RequestParam(value = "page", required = false) Integer pageNo,
                                        @RequestParam(value = "belongOrg", required = false) String belongOrg,
                                        HttpServletRequest request, PrintWriter out) {
        JSONObject json = new JSONObject();
        Map<String, Object> reqMap = Maps.newHashMap();
        if (StringUtil.isNotEmpty(belongOrg)) {
            reqMap.put("belongOrg", belongOrg);
        }
        reqMap.put("startPage", (pageNo - 1) * pageSize);
        reqMap.put("limit", pageSize);
        List<TBdExecutor> lists = bdManagementService.queryBDExecutors(reqMap);
        long total = bdManagementService.countTbdExecutors(reqMap);
        if (null != lists && lists.size() > 0) {
            json.put("total", total);
            json.put("rows", lists);
        } else {
            json.put("total", 0);
            json.put("rows", lists);
        }
        out.write(json.toJSONString());
        return null;
    }

    /**
     * 新增机构窗口
     * 
     * @return
     */
    @RequestMapping("/openAddInstitutionWindow")
    public ModelAndView openAddInstitutionWindow() {
        ModelAndView mav = new ModelAndView();
        mav.addObject("oprFlag", "0");//0代表新增
        mav.setViewName("bdManagement/detailInstitutionInfo");
        return mav;
    }

    /**
     * 新增机构
     * 
     * @param request
     * @param out
     * @return
     */
    @RequestMapping(value="/addInstitutionWindow",method=RequestMethod.POST)
    public ModelAndView addInstitutionWindow(HttpServletRequest request, PrintWriter out) {
        Map<String,Object> reqMap = Maps.newHashMap();
        if(StringUtil.isNotEmpty((String)request.getParameter("orgName"))){
            reqMap.put("orgName", (String)request.getParameter("orgName"));
        }
        if(StringUtil.isNotEmpty((String)request.getParameter("licenseNo"))){
            reqMap.put("licenseNo", (String)request.getParameter("licenseNo"));
        }
        if(StringUtil.isNotEmpty((String)request.getParameter("alias"))){
            reqMap.put("alias", (String)request.getParameter("alias"));
        }
        if(StringUtil.isNotEmpty((String)request.getParameter("nameLR"))){
            reqMap.put("nameLR", (String)request.getParameter("nameLR"));
        }
        if(StringUtil.isNotEmpty((String)request.getParameter("phoneNoLR"))){
            reqMap.put("phoneNoLR", (String)request.getParameter("phoneNoLR"));
        }
        if(StringUtil.isNotEmpty((String)request.getParameter("certNoLR"))){
            reqMap.put("certNoLR", (String)request.getParameter("certNoLR"));
        }
        if(StringUtil.isNotEmpty((String)request.getParameter("regAddress"))){
            reqMap.put("regAddress", (String)request.getParameter("regAddress"));
        }
        if(StringUtil.isNotEmpty((String)request.getParameter("remark"))){
            reqMap.put("remark", (String)request.getParameter("remark"));
        }
        if(StringUtil.isNotEmpty((String)request.getParameter("manager"))){
            reqMap.put("manager", (String)request.getParameter("manager"));
        }
        if(StringUtil.isNotEmpty((String)request.getParameter("active"))){
            reqMap.put("active", (String)request.getParameter("active"));
        }
        try {
            int result = bdManagementService.saveInstitution(reqMap);
            if(result>0){
                logger.info("展业机构新增成功,参数为[{}]",reqMap);
                out.print("新增成功");
            }else{
                logger.info("展业机构新增失败,参数为[{}]",reqMap);
                out.print("系统异常，新增机构失败");
            }
        } catch (Exception e) {
            logger.error("新增机构失败", e);
            out.print("系统异常，新增机构失败");
        }
        return null;
    }

    /**
     * 修改机构窗口
     * 
     * @param orgId
     * @return
     */
    @RequestMapping("/openModifyInstitutionWindow")
    public ModelAndView openModifyAddInstitutionWindow(@RequestParam(value = "orgId", required = false) Integer orgId) {
        ModelAndView mav = new ModelAndView();
        if(orgId == null){
            logger.info("机构号为空");
            mav.addObject("oprFlag", "1");//1代表修改
            mav.setViewName("bdManagement/detailInstitutionInfo");
            return mav;
        }
        //查询展业机构
        TBdInstitution institution = bdManagementService.selectByBelongOrg(orgId);
        mav.addObject("institution",institution);
        mav.addObject("oprFlag", "1");//1代表修改
        mav.setViewName("bdManagement/detailInstitutionInfo");
        return mav;
    }

    /**
     * 修改机构
     * 
     * @param request
     * @param out
     * @return
     */
    @RequestMapping(value="/modifyInstitutionWindow",method=RequestMethod.POST)
    public ModelAndView modifyInstitutionWindow(HttpServletRequest request, PrintWriter out) {
        Map<String,Object> reqMap = Maps.newHashMap();
        if(StringUtil.isNotEmpty((String)request.getParameter("orgId"))){
            reqMap.put("orgId", Integer.parseInt((String)request.getParameter("orgId")));
        }
        if(StringUtil.isNotEmpty((String)request.getParameter("orgName"))){
            reqMap.put("orgName", (String)request.getParameter("orgName"));
        }
        if(StringUtil.isNotEmpty((String)request.getParameter("licenseNo"))){
            reqMap.put("licenseNo", (String)request.getParameter("licenseNo"));
        }
        if(StringUtil.isNotEmpty((String)request.getParameter("alias"))){
            reqMap.put("alias", (String)request.getParameter("alias"));
        }
        if(StringUtil.isNotEmpty((String)request.getParameter("nameLR"))){
            reqMap.put("nameLR", (String)request.getParameter("nameLR"));
        }
        if(StringUtil.isNotEmpty((String)request.getParameter("phoneNoLR"))){
            reqMap.put("phoneNoLR", (String)request.getParameter("phoneNoLR"));
        }
        if(StringUtil.isNotEmpty((String)request.getParameter("certNoLR"))){
            reqMap.put("certNoLR", (String)request.getParameter("certNoLR"));
        }
        if(StringUtil.isNotEmpty((String)request.getParameter("regAddress"))){
            reqMap.put("regAddress", (String)request.getParameter("regAddress"));
        }
        if(StringUtil.isNotEmpty((String)request.getParameter("remark"))){
            reqMap.put("remark", (String)request.getParameter("remark"));
        }
        if(StringUtil.isNotEmpty((String)request.getParameter("manager"))){
            reqMap.put("manager", (String)request.getParameter("manager"));
        }
        if(StringUtil.isNotEmpty((String)request.getParameter("active"))){
            reqMap.put("active", (String)request.getParameter("active"));
        }
        try {
            int result = bdManagementService.modifyInstitution(reqMap);
            if(result>0){
                logger.info("展业机构修改成功,参数为[{}]",reqMap);
                out.print("修改成功");
            }else{
                logger.info("展业机构修改失败,参数为[{}]",reqMap);
                out.print("系统异常，修改机构失败");
            }
        } catch (Exception e) {
            logger.error("修改机构失败", e);
            out.print("系统异常，修改机构失败");
        }
        return null;
    }

    /**
     * 删除
     * 
     * @param orgId
     * @param out
     * @return
     */
    public ModelAndView deleteInstitution(@RequestParam(value="orgId",required=false)String orgId,PrintWriter out){
        Map<String,Object> reqMap = Maps.newHashMap();
        try {
            if(StringUtil.isNotEmpty(orgId)){
                reqMap.put("orgId", Integer.parseInt(orgId));
            }
            reqMap.put("active", "0");
            int flag = bdManagementService.modifyInstitution(reqMap);
            if(flag>0){
                out.print("删除成功");
                return null;
            }else{
                out.print("删除失败");
                return null;
            }
        } catch (NumberFormatException e) {
            logger.error("系统异常", e);
            out.print("删除失败");
            return null;
        }
    }
    
    /**
     * 激活
     * 
     * @param orgId
     * @param out
     * @return
     */
    public ModelAndView activeInstitution(@RequestParam(value="orgId",required=false)String orgId,PrintWriter out){
        Map<String,Object> reqMap = Maps.newHashMap();
        try {
            if(StringUtil.isNotEmpty(orgId)){
                reqMap.put("orgId", Integer.parseInt(orgId));
            }
            reqMap.put("active", "1");
            int flag = bdManagementService.modifyInstitution(reqMap);
            if(flag>0){
                out.print("激活成功");
                return null;
            }else{
                out.print("激活失败");
                return null;
            }
        } catch (NumberFormatException e) {
            logger.error("系统异常", e);
            out.print("激活失败");
            return null;
        }
    }
    
    /**
     * 
     * @param belongOrg
     * @return
     */
    @RequestMapping("/bdExecutorWindow")
    public ModelAndView bdExecutorWindow(@RequestParam(value = "belongOrg", required = false) String belongOrg) {
        ModelAndView mav = new ModelAndView();
        mav.addObject("belongOrg", belongOrg);
        mav.setViewName("bdManagement/bdExecutorNav");
        return mav;
    }
}
