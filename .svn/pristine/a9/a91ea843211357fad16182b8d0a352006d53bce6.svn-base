package com.hrbb.loan.spi.ZZ;

import java.math.RoundingMode;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.hrbb.loan.pos.service.LoanPosContractManagementService;
import com.hrbb.loan.pos.service.LoanPosCreditApplyService;
import com.hrbb.loan.pos.service.LoanPosCustomerService;
import com.hrbb.loan.pos.service.LoanPosPaybackService;
import com.hrbb.loan.pos.util.StringUtil;
import com.hrbb.loan.pos.util.ValidateUtil;
import com.hrbb.loan.spiconstants.CreditApplyHServiceConstants;
import com.hrbb.loan.spiconstants.HServiceReturnCode;
import com.hrbb.sh.framework.HResponse;
import com.hrbb.sh.framework.HServiceException;

/**
 * TransType:AP0007 -> 电子协议查询.
 * 
 * @author xiongshaogang
 * @version $Id: ZZAPPElectronicProtocolQueryHserviceImpl.java, v 0.1 2015年4月21日 下午7:28:40 xiongshaogang Exp $
 */
@Service("zzAppElectronicProtocolQuery")
public class ZZAPPElectronicProtocolQueryHserviceImpl extends ZZAPPFoundationServiceImpl {
    Logger                                   logger = LoggerFactory
                                                        .getLogger(ZZAPPElectronicProtocolQueryHserviceImpl.class);
    @Autowired
    private LoanPosCreditApplyService        loanPosCreditApplyService;
    @Autowired
    private LoanPosContractManagementService loanPosContractManagementService;
    @Autowired
    private LoanPosCustomerService           loanPosCustomerService;

    @Autowired
    private LoanPosPaybackService            loanPosPaybackService;

    @Override
    protected HResponse doProcesser(HResponse resp, Map<String, String> headerMap,
                                    Map<String, String> bodyMap) throws HServiceException {
        logger.debug("in ZZAPPElectronicProtocolQueryHserviceImpl...");
        
        // 1. 组装检索条件
        Map<String, Object> queryMap = Maps.newHashMap();
        if (!StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.custid))) {
            queryMap.put("custId", bodyMap.get(CreditApplyHServiceConstants.custid));
        }
        if (!StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.custname))) {
            queryMap.put("custName", bodyMap.get(CreditApplyHServiceConstants.custname));
        }
        if (!StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.paperkind))) {
            queryMap.put("paperKind", bodyMap.get(CreditApplyHServiceConstants.paperkind));
        }
        if (!StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.paperid))) {
            queryMap.put("paperId", bodyMap.get(CreditApplyHServiceConstants.paperid));
        }
        if (!StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.loanid))) {
            queryMap.put("loanId", bodyMap.get(CreditApplyHServiceConstants.loanid));
        }
        if (!StringUtil.isEmpty(bodyMap.get("contno"))) {
            queryMap.put("contNo", bodyMap.get("contno"));
        }
        if (!StringUtil.isEmpty(bodyMap.get("cncontno"))) {
            queryMap.put("cnContNo", bodyMap.get("cncontno"));
        }
        if (!StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.begindate))) {
            queryMap.put("beginDate", bodyMap.get(CreditApplyHServiceConstants.begindate));
        }
        if (!StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.enddate))) {
            queryMap.put("endDate", bodyMap.get(CreditApplyHServiceConstants.enddate));
        }
        
        // 2. 合同明细检索
        List<Map<String, Object>> queryList = loanPosContractManagementService.queryListByZzApp(queryMap);
        if (queryList == null || queryList.size() < 1) {
            bodyMap.put("respcode", HServiceReturnCode.QUERY_NULL_ERROR.getReturnCode());
            bodyMap.put("respmsg", HServiceReturnCode.QUERY_NULL_ERROR.getReturnMessage());
            resp.setRespCode(HServiceReturnCode.QUERY_NULL_ERROR.getReturnCode());
            resp.setRespMessage(HServiceReturnCode.QUERY_NULL_ERROR.getReturnMessage());
            resp.setRespTime(new Date());
            return getBlankHResponse(resp, headerMap, bodyMap);
        }
        
        // 3. 格式化
        setFormat(queryList);
        
        // 4. 成功应答
        Map<String, Object> rootMap = Maps.newHashMap();
        Map<String, Object> detailsMap = Maps.newHashMap();
        detailsMap.put("details", queryList);
        detailsMap.put("respcode", HServiceReturnCode.SUCCESS.getReturnCode());
        detailsMap.put("respmsg", HServiceReturnCode.SUCCESS.getReturnMessage());
        
        // 4.1 签名处理
        headerMap.put("Mac", sign(detailsMap, null));
        
        rootMap.put("HrbbHeader", headerMap);
        rootMap.put("HrbbBody", detailsMap);
        resp.setRespCode(HServiceReturnCode.SUCCESS.getReturnCode());
        resp.setRespMessage(HServiceReturnCode.SUCCESS.getReturnMessage());
        resp.setRespTime(new Date());
        resp.setProperties(rootMap);
        logger.info("回写数据: " + resp.toString());
        logger.debug("out ZZAPPElectronicProtocolQueryHserviceImpl...");
        return resp; 
    }
    
    /**
     * format.
     * 
     * @param formatList
     */
    private void setFormat(List<Map<String, Object>> formatList) {
        if (formatList.isEmpty()) {
            return;
        }
        
        Map<String, Object> tmpMap = null;
        for (int i = 0; i < formatList.size(); i++) {
            tmpMap = formatList.get(i);
            if (tmpMap.isEmpty()) {
                continue;
            }
            
            TmpMsgBodyParams = new ArrayList<String>();
            
            for (Map.Entry<String, Object> en : tmpMap.entrySet()) {
                String key = en.getKey();
                
                TmpMsgBodyParams.add(key);
                
                // format process
                if (tmpMap.get(key) == null) {
                    tmpMap.put(key, "");
                    continue;
                }
                
                // decimal
                if ("conttotalamt".equals(key)
                        || "conttouseamt".equals(key)) {
                    NumberFormat nf = NumberFormat.getNumberInstance();
                    nf.setMaximumFractionDigits(5);
                    nf.setRoundingMode(RoundingMode.CEILING);
                    nf.setGroupingUsed(false);
                    tmpMap.put(key, nf.format(tmpMap.get(key)));
                }
                
                // contstatus
                if ("contstatus".equals(key)) {
                	logger.debug("不等贷电子协议查询 contstatus= " + tmpMap.get(key));
                    tmpMap.put(key, zzAppContractStatusMap.get((String)tmpMap.get(key)));
                }
            }
            
            // 无数据字段赋空
            for (String param : MsgBodyParams) {
//                logger.info("设置应答字段 [" + param + "]");
                if (!TmpMsgBodyParams.contains(param)) {
                    tmpMap.put(param, "");
//                    logger.info("无数据字段赋空 [" + param + "]");
                }
            }
        }
        
    }
    
    /**
     * 不等贷 协议状态转义.
     * 
     * 已生效    01      01
              已冻结    02      02
              已中止    03      03
              已终止    04      04
              已失效    09      04
              未签约    05      05
              已签约    06      05
     */
    private static ImmutableMap<String, String> zzAppContractStatusMap = new ImmutableMap.Builder<String, String>().put("01", "01")
                                                                                                           .put("02", "02")
                                                                                                           .put("03", "03")
                                                                                                           .put("04", "04")
                                                                                                           .put("09", "09")
                                                                                                           .put("05", "05")
                                                                                                           .put("06", "06")
                                                                                                           .build();
    
    private static List<String> MsgBodyParams = new ArrayList<String>();
    static {
        MsgBodyParams.add("custid");
        MsgBodyParams.add("custname");
        MsgBodyParams.add("paperkind");
        MsgBodyParams.add("paperid");
        MsgBodyParams.add("loanid");
        MsgBodyParams.add("contno");
        MsgBodyParams.add("cncontno");
        MsgBodyParams.add("begindate");
        MsgBodyParams.add("enddate");
        MsgBodyParams.add("conttotalamt");
        MsgBodyParams.add("conttouseamt");
        MsgBodyParams.add("interate");
        MsgBodyParams.add("retukind");
        MsgBodyParams.add("DEPESUBSACNO");
        MsgBodyParams.add("contstatus");
        MsgBodyParams.add("adjustreason");
        MsgBodyParams.add("refreshdate");
    }
    private List<String> TmpMsgBodyParams = null;

    /**
     * 请求包校验处理.
     * 
     * @param headerMap
     * @param bodyMap
     * @return
     * @throws Exception 
     */
    protected boolean validate(Map<String, String> headerMap, Map<String, String> bodyMap,
                             HResponse resp) throws HServiceException {
        if (!validateHeader(headerMap, bodyMap, resp)) {
            return false;
        }

        // 联合校验
        boolean idx = true;
        try {
            if (StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.loanid))
                && StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.custid))
                && StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.custname))
                && StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.paperid))
                && StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.paperkind))
                && StringUtil.isEmpty(bodyMap.get("contno"))
                && StringUtil.isEmpty(bodyMap.get("cncontno"))) {
                logger.error("检索条件不完整 :[]", "");
                bodyMap.put("respcode", HServiceReturnCode.LOANID_ERROR.getReturnCode());
                bodyMap.put("respmsg", HServiceReturnCode.LOANID_ERROR.getReturnMessage());
                resp.setRespCode(HServiceReturnCode.LOANID_ERROR.getReturnCode());
                resp.setRespMessage(HServiceReturnCode.LOANID_ERROR.getReturnMessage());
                idx = false;
            } else if (!StringUtil.isEmpty(bodyMap.get(CreditApplyHServiceConstants.paperid))
                    && !ValidateUtil.checkIdNumber2(bodyMap.get(CreditApplyHServiceConstants.paperid))) {
                logger.error("证件代码不合法:[]",
                    bodyMap.get(CreditApplyHServiceConstants.paperkind) + "_"
                            + CreditApplyHServiceConstants.paperid);
                bodyMap.put("respcode", HServiceReturnCode.PAPERID_ERROR.getReturnCode());
                bodyMap.put("respmsg", HServiceReturnCode.PAPERID_ERROR.getReturnMessage());
                resp.setRespCode(HServiceReturnCode.PAPERID_ERROR.getReturnCode());
                resp.setRespMessage(HServiceReturnCode.PAPERID_ERROR.getReturnMessage());
                idx = false;
            }

        } catch (Exception e) {
            logger.error("校验 异常:[]", e.getMessage());
            return false;
        }

        return idx;
    }

    /**
     * 失败应答.
     * 
     * @param response
     * @return
     */
    protected HResponse getBlankHResponse(HResponse response, Map<String, String> headerMap, Map<String, String> bodyMap) {
        Map<String, Object> respMap = Maps.newHashMap();
        Map<String, Object> tmpBodyMap = Maps.newHashMap();
        List<Object> respList = Lists.newArrayList();
        tmpBodyMap.put("details", respList);
        tmpBodyMap.put("respcode", bodyMap.get("respcode"));
        tmpBodyMap.put("respmsg", bodyMap.get("respmsg"));
        
        // 5.1 签名处理
        headerMap.put("Mac", sign(tmpBodyMap, null));
        
        respMap.put("HrbbHeader", headerMap);
        respMap.put("HrbbBody", tmpBodyMap);
        response.setProperties(respMap);
        return response;
    }
}
