package com.hrbb.loan.spi.SALE;

import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang.time.DateFormatUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.brbb.loan.sale.validate.LoanSaleValidate;
import com.google.common.collect.Maps;
import com.hrbb.loan.pos.biz.backstage.inter.LoanPosContractManagementBiz;
import com.hrbb.loan.pos.dao.entity.TApproveResult;
import com.hrbb.loan.pos.dao.entity.TContractManagement;
import com.hrbb.loan.pos.service.LoanPosContractManagementService;
import com.hrbb.loan.pos.util.IdUtil;
import com.hrbb.loan.pos.util.MapUtils;
import com.hrbb.loan.pos.util.SignUtil;
import com.hrbb.loan.pos.util.StringUtil;
import com.hrbb.loan.sale.service.LoanSaleApplyService;
import com.hrbb.loan.spiconstants.HServiceReturnCode;
import com.hrbb.sh.framework.HRequest;
import com.hrbb.sh.framework.HResponse;
import com.hrbb.sh.framework.HService;
import com.hrbb.sh.framework.HServiceException;

/**
 * 电子协议生成服务.
 * 
 * @author litengfeng
 * @version $Id: ZZSaleAPPElectricContractGenerateServiceImpl.java, v 0.1 2015年5月14日 下午4:28:27 litengfeng Exp $
 */
@Service("zzAppSaleElectricContractGenerate")
public class ZzSaleAPPElectricContractGenerateServiceImpl implements HService {
    Logger                                   logger = LoggerFactory
                                                        .getLogger(ZzSaleAPPElectricContractGenerateServiceImpl.class);
    @Autowired
    private LoanPosContractManagementService loanPosContractManagementService;

    @Autowired
    private LoanSaleApplyService        loanSaleApplyService;
    
    @Autowired
    private LoanPosContractManagementBiz loanPosContractManagementBiz;

    @Override
    public HResponse serve(HRequest request) throws HServiceException {
        logger.debug("in ZzSaleAPPElectricContractGenerateServiceImpl...");

        // 0. 接收请求包，解包
        Map<String, String> headerMap = (Map<String, String>) request.getProperties().get("HrbbHeader");
        Map<String, String> bodyMap = (Map<String, String>) request.getProperties().get("HrbbBody");
        logger.info("headerMap : " + MapUtils.toString(headerMap));
        logger.info("bodyMap : " + MapUtils.toString(bodyMap));

        // 1. 请求包校验
        HResponse resp = new HResponse();
        if (!validate(headerMap, bodyMap, resp)) {
            resp.setRespTime(new Date());
            return getBlankHResponse(resp, headerMap, bodyMap);
        }

        // 2. 验证数字签名,暂不实现
        String signedMsg = SignUtil.getSignMsg((Map<String, Object>)request.getProperties().get("HrbbBody"), null);
        logger.info("请求待签名串 signedMsg = [" + signedMsg + "]");
//        if (!SignUtil.verifySign(SignUtil.MD5_ALG, signedMsg, headerMap.get("Mac"), SignUtil.getProperty("app_posloan_signkey"))) {
//            logger.error("数字签名验证失败");
//            bodyMap.put("respcode", HServiceReturnCode.OTHER_ERROR.getReturnCode());
//            bodyMap.put("respmsg", HServiceReturnCode.OTHER_ERROR.getReturnMessage());
//            resp.setRespCode(HServiceReturnCode.OTHER_ERROR.getReturnCode());
//            resp.setRespMessage(HServiceReturnCode.OTHER_ERROR.getReturnMessage());
//            resp.setRespTime(new Date());
//            return getBlankHResponse(resp, headerMap, bodyMap);
//        }
        logger.info("数字签名验证通过!");

        // 3. 电子协议生成处理
        TApproveResult result = loanPosContractManagementService.getApproveResultInfoByLoanId(bodyMap.get("loanid"));
        if (result == null) {
            logger.error("批复结果信息为空");
            bodyMap.put("respcode", HServiceReturnCode.POS_CONTRACT_ERROR.getReturnCode());
            bodyMap.put("respmsg", HServiceReturnCode.POS_CONTRACT_ERROR.getReturnMessage());
            resp.setRespCode(HServiceReturnCode.POS_CONTRACT_ERROR.getReturnCode());
            resp.setRespMessage(HServiceReturnCode.POS_CONTRACT_ERROR.getReturnMessage());
            resp.setRespTime(new Date());
            return getBlankHResponse(resp, headerMap, bodyMap);
        }
        
        // 4. 生成电子协议入库
        TContractManagement tContractManagement = loanPosContractManagementService.getContractInfoByLoanId(result.getLoanId());
        String contNo = null;
        if (tContractManagement == null) {
            contNo = IdUtil.getId("cn");
            Map<String, Object> contractMap = Maps.newHashMap();
            contractMap.put("contNo", contNo);
            contractMap.put("approveId", result.getApproveId());
            contractMap.put("channel", result.getBusinessSource());
            //contractMap.put("inChannelKind",request.getParameter("inChannelKind"));
            contractMap.put("loanId", result.getLoanId());
            contractMap.put("custId", result.getCustId());
            contractMap.put("custName", result.getCustName());
            contractMap.put("posCustId", result.getPosCustId());
            contractMap.put("posCustName", result.getPosCustName());
            contractMap.put("apprTotalAmt", result.getApproveAmount());
            contractMap.put("approveMoneyKind", result.getApproveMoneyKind());
            contractMap.put("approveInterest", result.getApproveInterest());
            contractMap.put("creditLine", result.getApproveAmount());
            contractMap.put("creditInterest", result.getApproveInterest());
            contractMap.put("contTerm", result.getApproveTerm());
            contractMap.put("paybackMethod", result.getPaybackMethod());
            contractMap.put("acceptAccount", result.getAcceptAccount());
            contractMap.put("accountOpenBank", result.getAccountOpenBank());
            contractMap.put("accountBranchBank", result.getAccountBranchBank());
            contractMap.put("accountSubBranchBank", result.getAccountSubBranchBank());
            contractMap.put("beginDate", new Date());
//        if (!StringUtil.isEmpty(request.getParameter("endDate"))) {
//            contractMap.put("endDate", DateUtil.getDatePattern3(request.getParameter("endDate")));
//        }
            contractMap.put("signDate", new Date());
            contractMap.put("termUnit", result.getTermUnit());
            contractMap.put("applyTerm", result.getApplyTerm());
            //      contractMap.put("assuKind",request.getParameter("askd"));
            //      contractMap.put("amt",new BigDecimal(request.getParameter("amt")));
            //      contractMap.put("retuSourRemark", request.getParameter("rtsrds"));
            //      contractMap.put("reckDay", request.getParameter("reckday"));
            //      contractMap.put("retuDay", request.getParameter("rtnday"));
            //      contractMap.put("prodName", request.getParameter("prodname"));
            contractMap.put("agreementStatus", "05"); //05已签约未生效
            logger.info("生成合同数据信息为" + MapUtils.toString(contractMap));
            if (loanPosContractManagementBiz.insertContractManagementMap(contractMap) != 1) {
                logger.error("电子协议生成失败");
                bodyMap.put("respcode", HServiceReturnCode.POS_CONTRACT_ERROR.getReturnCode());
                bodyMap.put("respmsg", HServiceReturnCode.POS_CONTRACT_ERROR.getReturnMessage());
                resp.setRespCode(HServiceReturnCode.POS_CONTRACT_ERROR.getReturnCode());
                resp.setRespMessage(HServiceReturnCode.POS_CONTRACT_ERROR.getReturnMessage());
                resp.setRespTime(new Date());
                return getBlankHResponse(resp, headerMap, bodyMap);
            }
        } else {
            contNo = tContractManagement.getContNo();
        }
        logger.info("电子协议生成成功");
        
        // 5. 组装应答
        try {
            bodyMap.put("loanid", result.getLoanId());
            bodyMap.put("contno", contNo);
            bodyMap.put("custid", result.getCustId());
            bodyMap.put("custname", result.getCustName());
            bodyMap.put("begindate", DateFormatUtils.format(System.currentTimeMillis(), "yyyyMMdd"));
            int approveTerm = Integer.parseInt(result.getApproveTerm());
            Calendar calendar = Calendar.getInstance();
            if ("Y".equals(result.getApproveTermUnit())) {
                calendar.add(Calendar.YEAR, approveTerm);
            } else if ("M".equals(result.getApproveTermUnit())) {
                calendar.add(Calendar.MONTH, approveTerm);
            } else {
                calendar.add(Calendar.DAY_OF_MONTH, approveTerm);
            }
            bodyMap.put("enddate", DateFormatUtils.format(calendar.getTime(), "yyyyMMdd"));
            bodyMap.put("apptcapi", result.getApproveAmount().toString());
            bodyMap.put("interate", result.getApproveInterest().toString());
            bodyMap.put("retukind", result.getPaybackMethod());
            bodyMap.put("loanbankname", result.getAccountOpenBank());
            bodyMap.put("loanbankacno", result.getAcceptAccount());
            bodyMap.put("loanbankacname", result.getCustName());
            bodyMap.put("repaybankname", result.getAccountOpenBank());
            bodyMap.put("repaybankaccno", result.getAcceptAccount());
            bodyMap.put("repaybankaccname", result.getCustName());
            bodyMap.put("retukind2", result.getLoanPaybackWay());
            bodyMap.put("loadendtime", "00:00:00");
            
        } catch (Exception e) {
            logger.error("电子协议生成失败", e);
            bodyMap.put("respcode", HServiceReturnCode.POS_CONTRACT_ERROR.getReturnCode());
            bodyMap.put("respmsg", HServiceReturnCode.POS_CONTRACT_ERROR.getReturnMessage());
            resp.setRespCode(HServiceReturnCode.POS_CONTRACT_ERROR.getReturnCode());
            resp.setRespMessage(HServiceReturnCode.POS_CONTRACT_ERROR.getReturnMessage());
            resp.setRespTime(new Date());
            return getBlankHResponse(resp, headerMap, bodyMap);
        }

        // 6. 回写成功应答
        Map<String, Object> rootMap = Maps.newHashMap();
        bodyMap.put("respcode", HServiceReturnCode.SUCCESS.getReturnCode());
        bodyMap.put("respmsg", HServiceReturnCode.SUCCESS.getReturnMessage());
        
        // 5.1 签名处理
        Map<String, Object> signMap = Maps.newHashMap();
        for (Iterator<String> it = bodyMap.keySet().iterator(); it.hasNext();) {
            String key = it.next();
            signMap.put(key, bodyMap.get(key));
        }
        headerMap.put("Mac", sign(signMap, null));
        
        rootMap.put("HrbbHeader", headerMap);
        rootMap.put("HrbbBody", bodyMap);
        resp.setRespCode(HServiceReturnCode.SUCCESS.getReturnCode());
        resp.setRespMessage(HServiceReturnCode.SUCCESS.getReturnMessage());
        resp.setRespTime(new Date());
        resp.setProperties(rootMap);
        logger.info("回写数据: " + resp.toString());
        logger.debug("out ZzSaleAPPElectricContractGenerateServiceImpl...");
        return resp;
    }

    /**
     * 请求包校验处理.
     * 
     * @param headerMap
     * @param bodyMap
     * @return
     * @throws Exception 
     */
    private boolean validate(Map<String, String> headerMap, Map<String, String> bodyMap,
                             HResponse resp) throws HServiceException {
        if(!LoanSaleValidate.validateHeader(headerMap, bodyMap, resp)){
            return false;
        }
        // 申请编号
        if (StringUtil.isEmpty(bodyMap.get("loanid"))) {
            logger.error("申请编号为空或不合法:[]", bodyMap.get("loanid"));
            bodyMap.put("respcode", HServiceReturnCode.LOANID_ERROR.getReturnCode());
            bodyMap.put("respmsg", HServiceReturnCode.LOANID_ERROR.getReturnMessage());
            resp.setRespCode(HServiceReturnCode.LOANID_ERROR.getReturnCode());
            resp.setRespMessage(HServiceReturnCode.LOANID_ERROR.getReturnMessage());
            return false;
        }

        // 客户编号
        if (StringUtil.isEmpty(bodyMap.get("custid"))) {
            logger.error("客户编号为空或不合法:[]", bodyMap.get("custid"));
            bodyMap.put("respcode", HServiceReturnCode.CUSTID_ERROR.getReturnCode());
            bodyMap.put("respmsg", HServiceReturnCode.CUSTID_ERROR.getReturnMessage());
            resp.setRespCode(HServiceReturnCode.CUSTID_ERROR.getReturnCode());
            resp.setRespMessage(HServiceReturnCode.CUSTID_ERROR.getReturnMessage());
            return false;
        }
        return true;
    }

    /**
     * 失败应答.
     * 
     * @param response
     * @return
     */
    private HResponse getBlankHResponse(HResponse response, Map<String, String> headerMap,
                                        Map<String, String> bodyMap) {
        Map<String, Object> respMap = Maps.newHashMap();
//        bodyMap.put("loanid", "");
//        bodyMap.put("contno", "");
//        bodyMap.put("custid", "");
//        bodyMap.put("custname", "");
//        bodyMap.put("begindate", "");
//        bodyMap.put("enddate", "");
//        bodyMap.put("apptcapi", "");
//        bodyMap.put("interate", "");
//        bodyMap.put("retukind", "");
//        bodyMap.put("loanbankname", "");
//        bodyMap.put("loanbankacno", "");
//        bodyMap.put("loanbankacname", "");
//        bodyMap.put("retukind2", "");
//        bodyMap.put("repaybankname", "");
//        bodyMap.put("repaybankaccno", "");
//        bodyMap.put("repaybankaccname", "");
//        bodyMap.put("loadendtime", "");
        
        // 5.1 签名处理
        Map<String, Object> signMap = Maps.newHashMap();
        for (Iterator<String> it = bodyMap.keySet().iterator(); it.hasNext();) {
            String key = it.next();
            signMap.put(key, bodyMap.get(key));
        }
        headerMap.put("Mac", sign(signMap, null));
        
        respMap.put("HrbbHeader", headerMap);
        respMap.put("HrbbBody", bodyMap);
        response.setProperties(respMap);
        return response;
    }
    
    /**
     * 回写签名处理.
     * 
     * @param signMap
     * @param ignoreSet
     * @return
     */
    private String sign(Map<String, Object> signMap, Set<String> ignoreSet) {
        String signedMsg = SignUtil.getSignMsg(signMap, ignoreSet);
        logger.info("应答待签名串 signedMsg = [" + signedMsg + "]");
        String signRet = SignUtil.sign(SignUtil.MD5_ALG, signedMsg, SignUtil.getProperty("app_posloan_signkey"));
        logger.info("应答签名 Mac = [" + signRet + "]");
        return signRet;
    }
}
