package com.hrbb.loan.pos.biz.backstage.inter.impl;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Map;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.alibaba.fastjson.JSONObject;
import com.google.common.base.Objects;
import com.google.common.collect.Maps;
import com.hrbb.loan.acct.facade.MadeLoanProcessBizHession;
import com.hrbb.loan.acct.facade.bean.BatchPayOutReq;
import com.hrbb.loan.acct.facade.bean.BatchPayOutRes;
import com.hrbb.loan.acct.facade.bean.BusiPropQueryReq;
import com.hrbb.loan.acct.facade.bean.BusiPropQueryRes;
import com.hrbb.loan.acct.facade.bean.CalcRamtReq;
import com.hrbb.loan.acct.facade.bean.CalcRamtRes;
import com.hrbb.loan.acct.facade.bean.MadeLoanContractInfoReq;
import com.hrbb.loan.acct.facade.bean.MadeLoanContractInfoRes;
import com.hrbb.loan.acct.facade.bean.MadeLoanCreditDuebillReq;
import com.hrbb.loan.acct.facade.bean.MadeLoanCreditDuebillRes;
import com.hrbb.loan.acct.facade.bean.MadeLoanLoanLedgerBean;
import com.hrbb.loan.acct.facade.common.constants.AcctRetConstants;
import com.hrbb.loan.acct.facade.common.constants.BatchPayoutFlagConstants;
import com.hrbb.loan.acct.facade.common.constants.ChannelConstants;
import com.hrbb.loan.pos.biz.backstage.inter.IMadeLoanAcctBiz;
import com.hrbb.loan.pos.biz.backstage.inter.IReceiptManageBiz;
import com.hrbb.loan.pos.biz.backstage.inter.LoanPosContractManagementBiz;
import com.hrbb.loan.pos.biz.bean.HInternalService;
import com.hrbb.loan.pos.biz.bean.PaymentExexDo;
import com.hrbb.loan.pos.biz.bean.RepaymentPlanQuery;
import com.hrbb.loan.pos.biz.constants.ProductInfoEnum;
import com.hrbb.loan.pos.dao.entity.TBankAccnoInfo;
import com.hrbb.loan.pos.dao.entity.TContractManagement;
import com.hrbb.loan.pos.dao.entity.TCustomer;
import com.hrbb.loan.pos.dao.entity.TReceiptInfo;
import com.hrbb.loan.pos.dao.entity.TransactionLog;
import com.hrbb.loan.pos.service.IGenericConfigService;
import com.hrbb.loan.pos.service.LoanPosBusinessCodeService;
import com.hrbb.loan.pos.service.LoanPosCustomerService;
import com.hrbb.loan.pos.util.DateUtil;
import com.hrbb.loan.pos.util.FinanceUtil;

/**
 * 
 * @author cjq
 * @version $Id: MadeLoanAcctBizImpl.java, v 0.1 2015年5月20日 下午1:11:03 cjq Exp $
 */
@Component("madeLoanAcctBizImpl")
public class MadeLoanAcctBizImpl implements IMadeLoanAcctBiz {
    
    private Logger logger = LoggerFactory.getLogger(MadeLoanAcctBizImpl.class);
    
    @Autowired
    private LoanPosContractManagementBiz loanPosContractManagementBiz;
    
    @Autowired
    private LoanPosCustomerService loanPosCustomerService;
    
    @Autowired
    private IReceiptManageBiz receiprManageBiz;
    
    @Autowired
    private IGenericConfigService genericConfigService;
    
    @Resource(name="madeLoanProcessBizHession")
    MadeLoanProcessBizHession madeLoanProcessBizHession;
    
    @Autowired
	private LoanPosBusinessCodeService loanPosBusinessCodeService;
    
    private String accountingEnable = "true";
    /**
     * 调用核算系统，添加合同
     * 
     * @param contNo 合同号
     * @param contract 合同
     * @param customerInfo 客户信息
     */
    @Override
    public boolean addContractInfo(String contNo, TContractManagement contract, TCustomer customerInfo) {
    	TransactionLog tl = new TransactionLog(contNo);
        // 核算返回对象
        MadeLoanContractInfoRes res = null;
        // 请求对象
        MadeLoanContractInfoReq req = new MadeLoanContractInfoReq();
        req.setLoanId(contract.getLoanId());//业务编号
        req.setLoanForm("0");//贷款形式：0 新增
        req.setAssuMethod("A01040000");//贷款方式：A01040000 信用
        req.setCurrency("CNY");//币种
        
        if(ProductInfoEnum.PRODUCT_POS.getProdId().equals(contract.getProdId()) || ProductInfoEnum.PRODUCT_LIULIANG.getProdId().equals(contract.getProdId())){
            req.setProdId(ProductInfoEnum.PRODUCT_LIULIANG.getProdId());//产品编号
        }else{
            req.setProdId(contract.getProdId());//产品编号
        }
        req.setProdName(contract.getProdName());//产品名称
        req.setContNo(contNo);
        req.setCnContractNo(contNo);
        req.setContractName(req.getProdName() + contNo);
        req.setCustId(contract.getCustId());//客户编号
        req.setCivilianId(customerInfo.getPaperId());//身份证号
        req.setCustName(contract.getCustName());//客户名称o
        req.setApprTotalAmt(contract.getCreditLine());//授信金额
        req.setContractTotalAmt(contract.getCreditLine());//授信金额
        req.setTermUnit(contract.getTermUnit());//期限单位
        req.setApptTerm(Integer.parseInt(contract.getApplyTerm()));//申请期限
        req.setContTerm(Integer.parseInt(contract.getContTerm()));//合同期限
        req.setBeginDate(contract.getBeginDate());//合同开始日
        req.setEndDate(contract.getEndDate());//合同到期日
        Calendar c = DateUtil.getCalendarToDate(contract.getEndDate());
        int day =  c.get(Calendar.DATE);//获取日 
        req.setRetuDay(day);//待定
        req.setTurnGraceDay(0);
       
        req.setRetuMethod(transPaybackMethod(contract.getPaybackMethod()));//还款方式
        req.setRetuMethod2(transPaybackMethod(contract.getPaybackMethod()));//
        req.setIntCalcMethod("1");//
        req.setSubsFlag("3");//还款方法（1、委托扣款（足额），2、委托扣款（不足额）。3、非委托扣款）
        req.setInteType("1");//利率类别（1、固定利率。2、比例浮动。3、加点浮动）
        req.setInterestRate(new BigDecimal(contract.getCreditInterest()));//利率
        req.setInteBalMethod("2");//结息方式（1、统一定日。2、按户定日）
        
        req.setAcBankId("6801");//机构代码
        req.setDepeSubsAc("100000000");
        req.setDepeSubsAcNo("10000000");
        req.setIndeSubsAc("100000000");
        req.setIndeSubsAcNo("100000000");
        req.setBillDay(20);
        req.setInstallAmt(new BigDecimal(0.00));
        req.setOperId("680199");
        
        StringBuilder extField = new StringBuilder("#hrbb#");
        extField.append(contNo).append("#").append(customerInfo.getPaperId()).append("#");
        req.setExtField(extField.toString());
  
        try{
	        //添加合同成功，记录核算返回合同编号
            logger.info("调用核算addContractInfo接口，合同contno=[],请求报文req=[{}]",contNo,req.toString());
            
	        res = madeLoanProcessBizHession.addContractInfo(req);
	        
	        logger.info("调用核算addContractInfo接口，合同contno=[{}],返回报文res=[{}]",contNo,res.toString());
	        
	        //处理结果
	        if(!AcctRetConstants.SUCCESS.getValue().equals(res.getRespCode())){
	            logger.error("accounting invoke error - madeLoanProcessBizHession.addContractInfo.");
	            tl.setStatus(TransactionLog.核心交易状态_失败);
	            return false;
	        }
	        //核算返回合同号
	        String acctContNo = null;
	        if(res != null) {
	            logger.info("remoteRespCode = {}, acctContNo = {}", res.getRespCode(), res.getContNo());
	            acctContNo = res.getContNo();
	        }
	        // 赋值
	        contract.setAcctContNo(acctContNo == null ? "06" + contract.getAcctContNo() : acctContNo);
	        // 请求
	        Map<String,Object> reqMap = Maps.newHashMap();
	        reqMap.put("contNo", contNo);
	        reqMap.put("acctContNo", contract.getAcctContNo());
	        reqMap.put("loanNum", 0);
	        contract.setLoanNum("0");
	        // 记录核算返回合同号
	        loanPosContractManagementBiz.updateAgreement(reqMap);
	        logger.info("accounting contractInfo[{}] updated.", req.getContNo());
	        
	        
	        tl.setTransObject(req, res);
	        return true;
        }catch(Exception e){
	       	 logger.error("调用发送合同接口失败!",e);
	       	 tl.setTransObject(req, e.getMessage());
	       	 tl.setStatus(TransactionLog.核心交易状态_失败);
        }finally{
	         /*记录交易日志*/
	         tl.setRspTime();
	         genericConfigService.insertTransactionLog(tl);
        }
        return false;
    }
    
    /**
     * 发送借据
     * 
     * @param contract 合同
     * @param customer 客户
     * @param receipt 借据
     */
    @Override
    public boolean addCreditDueBill(TContractManagement contract,TCustomer customer,TReceiptInfo receipt) {
    	TransactionLog tl = new TransactionLog(receipt.getReceiptId());
         //返回对象
         boolean isSuccess = false;
         //调用核算接口放款，返回对象
         MadeLoanCreditDuebillRes resp = null;
         int maxLoanNum = Integer.parseInt(contract.getLoanNum() == null ? "0" : contract.getLoanNum());
         int loanNum = maxLoanNum + 1;
         MadeLoanCreditDuebillReq addCreditDueReq = new MadeLoanCreditDuebillReq();
         
         if(ProductInfoEnum.PRODUCT_POS.getProdId().equals(contract.getProdId()) || ProductInfoEnum.PRODUCT_LIULIANG.getProdId().equals(contract.getProdId())){
             addCreditDueReq.setProdId(ProductInfoEnum.PRODUCT_LIULIANG.getProdId());//产品编号
         }else{
             addCreditDueReq.setProdId(contract.getProdId());
         }
         addCreditDueReq.setProdName(contract.getProdName());
         
//         addCreditDueReq.setLoanId(contract.getLoanId());//业务编号
         addCreditDueReq.setLoanId("POS"+receipt.getReceiptId());		//核心唯一索引,POS贷以POS开头
         addCreditDueReq.setContNo(contract.getAcctContNo());//借款合同编号
         addCreditDueReq.setLoanNum(loanNum);//发放顺序号 
         
         addCreditDueReq.setListType("41");//单据类型: 41 贷款发放
         addCreditDueReq.setBusinessType("41");//业务类型: 41 贷款发放
         addCreditDueReq.setRepayMethod(transPaybackMethod(contract.getPaybackMethod()));//还款方式:01 等额本息（分期型）；90 利随本清（白条型）
         addCreditDueReq.setLoanType("10");//贷款方式:10 信用
         addCreditDueReq.setLoanForm("0");//贷款形式:0 新增
         addCreditDueReq.setListStat("1");//单据状态:1 为记账
         addCreditDueReq.setInteBalMethod("2");//结息方式：2 按户定日
         addCreditDueReq.setIntcalcMethod("1");//计息方式：1 按期计息
         addCreditDueReq.setCurrency("CNY");
         addCreditDueReq.setPayMode("1");//支付方式：1 自主支付
         addCreditDueReq.setContType("2");//借款合同类型：1 最高额；2 一次性；3多次发放
//         addCreditDueReq.setRateType("2");//
//         addCreditDueReq.setBasicInteRate(new BigDecimal(6.32));//
//         addCreditDueReq.setFineRate(new BigDecimal(30.9));//
//         addCreditDueReq.setAcTime("141524");//
         
         addCreditDueReq.setCheckId("6801");//复审员
         addCreditDueReq.setIndesubsacNo(receipt.getPayAccount());//自主支付账号（必）	//账号允许变更,必须用借据信息
         addCreditDueReq.setIndesubsac(receipt.getCustName());//自助支付账户户名（必）
         addCreditDueReq.setSaveacName(receipt.getCustName());//委托扣款账户户名（必）
         addCreditDueReq.setSaveacNo(receipt.getPayAccount());//委托账户账号（必）
         addCreditDueReq.setOperId("680199");//初始经办人
         addCreditDueReq.setBankId("6801");//机构代码
         addCreditDueReq.setBeginDate(new Date());//放款日期
         addCreditDueReq.setEndDate(receipt.getEndDate());//到期日
         addCreditDueReq.setAcbankId("6801");//会计机构
         
         StringBuilder listIdSB = new StringBuilder("06");//拮据号
         listIdSB.append(contract.getContNo()).append(new DecimalFormat("###").format(addCreditDueReq.getLoanNum()));
         addCreditDueReq.setListId(listIdSB.toString());//单据ID
         
         StringBuilder extField = new StringBuilder("#hrbb#");
         extField.append(contract.getLoanId()).append("#").append(customer.getPaperId()).append("#");
         addCreditDueReq.setExtField(extField.toString());//拓展字段（必）
         
         addCreditDueReq.setCustId(customer.getCustId());//客户ID
         addCreditDueReq.setCivilianId(customer.getPaperId());//客户身份证
         addCreditDueReq.setCustName(customer.getCustName());//客户名称
         addCreditDueReq.setContTotalAmt(contract.getCreditLine());//合同金额
         addCreditDueReq.setLoanAmount(receipt.getPayApplyAmt());//发放金额
         addCreditDueReq.setLoanTerm(Integer.parseInt(receipt.getPayApplyTerm()));//贷款期限
         addCreditDueReq.setTermUnit("月");
         addCreditDueReq.setPeriods(receipt.getScheduleTimes());//还款期次	
         //addCreditDueReq.setInterestRate(new BigDecimal(contract.getCreditInterest()));//贷款利率[%]
         addCreditDueReq.setInterestRate(receipt.getLoanInterest());//贷款利率[%]
         addCreditDueReq.setFineRate(receipt.getFineRate());//逾期利率[%]
         if(receipt.getPaybackWay()==null || receipt.getPaybackWay().equals("90")){		//利随本清
        	 addCreditDueReq.setInstallAmt(receipt.getPayApplyAmt());		//分期还款额
         }else{
        	 if(receipt.getPaybackWay().equals("10")){		//等额本息的分期还款总额
        		 BigDecimal schedAmt = FinanceUtil.getSchedACPIAmount(receipt.getPayApplyAmt(), receipt.getScheduleTimes(), receipt.getLoanInterest());
        		 addCreditDueReq.setInstallAmt(schedAmt);
        	 }
         }
         addCreditDueReq.setTurnGraceDay(receipt.getGraceDays());//转逾期宽限天数
         addCreditDueReq.setIsBatch("1");//0,批量出款，1，单笔出款
         
         // 查询行号
         TBankAccnoInfo bankAccno = loanPosCustomerService.getBanAccnoById(receipt.getPayAccount());
         
         addCreditDueReq.setCdtrno(receipt.getPayAccount());//收款人账号
         if(bankAccno.getCdtbranchid() != null){
        	 addCreditDueReq.setCdtbranchid(bankAccno.getCdtbranchid());//收款行行号
        	 
         }else{
        	 addCreditDueReq.setCdtbranchid(bankAccno.getBankName());
         }
         addCreditDueReq.setCdtrnm(receipt.getCustName());//收款人名称
         
         addCreditDueReq.setChannelId(ChannelConstants.POS.getValue());
         
         addCreditDueReq.setLastInteDate(DateUtil.getCurrentTimePattern3());
         try{
             logger.info("调用核算addCreditDueBill接口，借据receiptId=[],请求报文req=[{}]",receipt.getReceiptId(),addCreditDueReq.toString());
        	 //放款（添加借据同时执行放款）
        	 resp = madeLoanProcessBizHession.addCreditDueBill(addCreditDueReq);
        	 
        	 logger.info("调用核算addCreditDueBill接口，借据receiptId=[{}],返回报文res=[{}]",receipt.getReceiptId(),resp.toString());
        	 
        	 if(!AcctRetConstants.SUCCESS.getValue().equals(resp.getRespCode())){
                 logger.error("调用核算接口，放款记账失败,Err="+resp.getMemo());
                 isSuccess = false;
                 tl.setStatus(TransactionLog.核心交易状态_失败);
                 return isSuccess;
             }
             isSuccess = true;
             // 记账成功后，更新借据表
             String loanAcNo = resp.getLoanAcNo();
             String listId = resp.getListId();
             Map<String,Object> reqMap = Maps.newHashMap();
             reqMap.put("loanAcNo", loanAcNo);
             reqMap.put("listId", listId);
             reqMap.put("receiptId", receipt.getReceiptId());
             receipt.setLoanAcNo(loanAcNo);
             receipt.setListId(listId);
             receiprManageBiz.updateReceiptInfo(reqMap);
             //放款成功
             logger.info("放款记账返回参数 [{}]",resp.toString());
             logger.info("放款记账成功 - addCreditDueBill[{}] success.", contract.getLoanId());
             
             
        	 tl.setTransObject(addCreditDueReq, resp);
        	 return isSuccess;
         }catch(Exception e){
        	 logger.error("调用发送借据接口失败!",e);
        	 tl.setTransObject(addCreditDueReq, e.getMessage());
        	 tl.setStatus(TransactionLog.核心交易状态_失败);
         }finally{
	         /*记录交易日志*/
	         tl.setRspTime();
	         genericConfigService.insertTransactionLog(tl);
         }
         return false;
    }

    /**
     * 单笔放款
     * 
     * @param receipt
     * @return
     */
    @Override
    public boolean batchPayout(TContractManagement contract, TReceiptInfo receipt){
    	TransactionLog tl = new TransactionLog(receipt.getReceiptId());
    	
        boolean isSuccess = false;
        BatchPayOutRes resp = new BatchPayOutRes();
        //请求借据json字符串
        JSONObject json = new JSONObject();
        json.put(receipt.getLoanAcNo(), receipt.getPayApplyAmt()== null ? "0.00" : receipt.getPayApplyAmt());
        String idListJson = json.toJSONString();
        
        BatchPayOutReq req = new BatchPayOutReq();
        req.setIdList(idListJson);
        req.setSumAmt(receipt.getPayApplyAmt());//拮据金额
        req.setBatchFlag(receipt.getPayChannel());
        req.setWorkDate(getAcctWorkDate());
        // 查询行号
        TBankAccnoInfo bankAccno = loanPosCustomerService.getBanAccnoById(receipt.getPayAccount());
        
        req.setCdtrno(receipt.getPayAccount());		//收款人账号
        req.setCdtrnm(receipt.getCustName());		//收款人名称
        /*针对超级网银支付通道获取行号*/
        String payChannelBankNo = "";
        logger.info("借据["+receipt.getReceiptId()+"]的支付通道为:"+receipt.getPayChannel());
        if(receipt.getPayChannel()!=null && receipt.getPayChannel().equals(BatchPayoutFlagConstants.SUPER_ONLINE_BANK.getCode())){		//2-超级网银
        	payChannelBankNo = getSOBankNo(bankAccno.getBankName());
        }else{
        	payChannelBankNo = bankAccno.getCdtbranchid();				//默认大小额
        }
        req.setCdtbranchid(payChannelBankNo);				//收款行行号
        req.setChannelId(ChannelConstants.POS.getValue());	//系统渠道
        // POS贷和流量贷都是1001020305
        if(ProductInfoEnum.PRODUCT_POS.getProdId().equals(contract.getProdId()) || ProductInfoEnum.PRODUCT_LIULIANG.getProdId().equals(contract.getProdId())){
            req.setProductId(ProductInfoEnum.PRODUCT_LIULIANG.getProdId());
        }else{
            req.setProductId(contract.getProdId());
        }
        
        //流水号
        req.setOutSysReqSeqNo(tl.getSeq());		//每次发送独立的seq
        
//        StringBuilder remark = new StringBuilder("#HRB_LOAN#").append(receipt.getLoanAcNo());
//        req.setRemark(remark.toString());
        
        logger.info("放款请求 - req = {}", req.toString());
        
        try{
            logger.info("调用核算batchPayout接口，借据receiptId=[{}],请求报文req = {}", receipt.getReceiptId(),req.toString());
            
	        resp = madeLoanProcessBizHession.batchPayout(req);
	        
	        logger.info("调用核算batchPayout接口，借据receiptId=[{}],返回报文resp = {}", receipt.getReceiptId(),resp.toString());
	        
	        if(AcctRetConstants.SUCCESS.getValue().equals(resp.getRespCode())) {
	            logger.error("该笔借据 loanAcNo[{}] 放款成功.", idListJson);
	            isSuccess = true;
	            
	            /*发送成功后更新exeSeq*/
	            logger.info("更新借据[facilityId"+receipt.getReceiptId()+"]的放款序号:"+tl.getSeq());
	            Map<String,Object> mapSeq = Maps.newHashMap();
	            mapSeq.put("exeSeq", tl.getSeq());
	            mapSeq.put("receiptId", receipt.getReceiptId());
	            receiprManageBiz.updateReceiptInfo(mapSeq);
	        }
	        
	        if(!AcctRetConstants.SUCCESS.getValue().equals(resp.getRespCode())) {
	            logger.error("该笔借据 loanAcNo[{}] 放款失败.", idListJson);
	            isSuccess = false;
	            tl.setStatus(TransactionLog.核心交易状态_失败);
	        }
	        
	        tl.setTransObject(req, resp);
	        return isSuccess;
	    }catch(Exception e){
	     	logger.error("调用发送转账接口失败!",e);
	    	tl.setTransObject(req, e.getMessage());
	       	tl.setStatus(TransactionLog.核心交易状态_失败);
	    }finally{
	         /*记录交易日志*/
	         tl.setRspTime();
	         genericConfigService.insertTransactionLog(tl);
	    }
	    return false;
    }
    
    /**
     * 发送放款指令
     * 
     * @param paymentApply
     * @param receipt
     */
    @Override
    public Map<String,Object> sendMadeLoanCommend(TReceiptInfo receipt) {
        Map<String,Object> map = Maps.newHashMap();
        Map<String,Object> mapUpt = Maps.newHashMap();
        // 核算系统开放
        if("true".equals(accountingEnable.trim())){
            //TODO 发送用款支付指令,更新放款执行状态
            map = this.madeLoan(receipt);
            //modify by cjq 借据状态更新放到madeLoan里面
//            if(map.get("resCode").equals("000000")){
//                //发送用款支付指令成功，更新借据表和用款状态
//                mapUpt.put("receiptId", receipt.getReceiptId());
//                mapUpt.put("lendingChannel", "0");
//                mapUpt.put("loanExecuteStatus", "10");
//                mapUpt.put("lnExctStsUpdtTm", new Date());
//                receiprManageBiz.updateReceiptInfo(mapUpt);
//            }else{
//                //发送用款支付指令失败，更新借据表和用款状态
//                mapUpt.put("receiptId", receipt.getReceiptId());
//                mapUpt.put("lendingChannel", "0");
//                mapUpt.put("loanExecuteStatus", "19");
//                mapUpt.put("lnExctStsUpdtTm", new Date());
//                receiprManageBiz.updateReceiptInfo(mapUpt);
//            }
        }
        // 系统模拟（修改状态）
        else{
            map.put("resCode", "000000");
            mapUpt.put("receiptId", receipt.getReceiptId());
            mapUpt.put("lendingChannel", "1");
            mapUpt.put("loanExecuteStatus", "10");
            mapUpt.put("lnExctStsUpdtTm", new Date());
            receiprManageBiz.updateReceiptInfo(mapUpt);
        }
        return map;
    }

    /**
     * 放款执行
     * 
     * @param out
     * @param paymentApply
     * @param receipt
     */
    @Override
    public Map<String,Object> madeLoan(TReceiptInfo receipt) {
        
        Map<String,Object> resMessage = Maps.newHashMap();
        //协议信息
        TContractManagement contract = loanPosContractManagementBiz.getContractByContNo(receipt.getContNo());
        //客户信息
        TCustomer customerInfo = loanPosCustomerService.getCustumerInfoById(Objects.firstNonNull(contract.getCustId(), ""));
        boolean isSuccessAddContractInfo = false;
        boolean isSuccessAddCreditDueBill = false;
        boolean isSuccessBatchPayout = false;
        
        // 放款step1:添加合同
        if(null == contract.getAcctContNo() || "".equals(contract.getAcctContNo().trim())){			//已经发送过的合同不再2次发送
            isSuccessAddContractInfo = this.addContractInfo(contract.getContNo(), contract, customerInfo);
            if(isSuccessAddContractInfo){
                logger.info("添加合同成功");
            }else{
                logger.info("调用核算接口，发送合同失败");
                resMessage.put("resCode", "000001");
                resMessage.put("resMessage", "调用核算接口 [addContractInfo]，添加合同失败");
                return resMessage;
            }
        }
        
        // 放款step2:放款记账
        if(null == receipt.getLoanAcNo() || "".equals(receipt.getLoanAcNo())){
            isSuccessAddCreditDueBill = this.addCreditDueBill(contract,customerInfo,receipt);
            if(isSuccessAddCreditDueBill){
                logger.info("放款记账成功");
            }else{
                logger.info("调用核算接口，放款记账失败");
                resMessage.put("resCode", "000002");
                resMessage.put("resMessage", "调用核算接口 [addCreditDueBill]，放款记账失败");
                return resMessage;
            }
        }
        
        // 放款step3:执行放款
        if(!"10".equals(receipt.getLoanExecuteStatus()) && !"20".equals(receipt.getLoanExecuteStatus())){
            
//          isSuccessBatchPayout = this.batchPayout(contract, receipt); //modify by cjq 放款修改到PaymentExexDo实现
            
            //执行放款
            HInternalService paymentExec = new PaymentExexDo(receipt);
            try {
                isSuccessBatchPayout = paymentExec.execute();
            } catch (Exception e) {
                logger.error("放款执行异常", e);
                resMessage.put("resCode", "000003");
                resMessage.put("resMessage", "放款执行失败");
                return resMessage;
            }
            
            if(isSuccessBatchPayout){
                logger.info("放款执行成功");
                //生成还款计划
                HInternalService planExec = new RepaymentPlanQuery(receipt.getReceiptId());
                try {
					if(planExec.execute()){
						logger.error("获取借据["+receipt.getReceiptId()+"]还款计划成功.");
					}else{
						logger.error("获取借据["+receipt.getReceiptId()+"]还款计划失败.");		//此处只提示不做拦截处理,不因还款计划影像放款流程
					}
				} catch (Exception e) {
					logger.error("查询还款计划失败!",e);
				}
            }else{
                logger.info("调用核算接口，放款执行失败");
                resMessage.put("resCode", "000003");
                resMessage.put("resMessage", "放款执行失败");
                return resMessage;
            }
        }
        
        resMessage.put("resCode", "000000");
        resMessage.put("resMessage", "放款成功");
        return resMessage;
    }

    /**
     * 调用核算系统获取workDate
     * @return
     */
    public Date getAcctWorkDate(){
        Calendar c = Calendar.getInstance();
        int hour = c.get(Calendar.HOUR_OF_DAY);
        int minute = c.get(Calendar.MINUTE);
        BusiPropQueryReq busiPropQueryReq = new BusiPropQueryReq();
        busiPropQueryReq.setName("workDate");
        BusiPropQueryRes busiPropQueryRes = madeLoanProcessBizHession.queryBusiProperties(busiPropQueryReq);
        Date workDate = busiPropQueryRes.getWorkDate();
        c.setTime(workDate);
        if(hour >= 16 && minute >= 30) {
            c.add(Calendar.DATE, 1);
        }
        return c.getTime();
    }
    
    /**
     * 试算
     * 
     * @param contract
     * @return
     */
    public CalcRamtRes calcRamtWithBean(TContractManagement contract,TReceiptInfo receipt){
        CalcRamtRes res = new CalcRamtRes();
        CalcRamtReq req = new CalcRamtReq();
        req.setLoanAcNo("loanAcNo");
        req.setAheakind("1");//还款类型
        req.setSsubsamt(receipt.getPayApplyAmt().doubleValue());//应放金额
        req.setWorkDate(receipt.getEndDate());//下次还款日
        MadeLoanLoanLedgerBean bean = new MadeLoanLoanLedgerBean();
        bean.setInterestRate(receipt.getLoanInterest()); //贷款利率
        bean.setaBal(receipt.getPayApplyAmt());//正常本金
        bean.setBeginDate(receipt.getBeginDate());
        bean.setLastInteDate(receipt.getBeginDate());//
        bean.setRepayMethod(receipt.getPaybackWay());//还款方式
        bean.setProdId(contract.getProdId());
        req.setBean(bean);
        res = madeLoanProcessBizHession.calcRamtWithBean(req);
        return res;
    }
    
    /**
     * 获取超级网银行号
     * @param bankNo
     * @return
     */
    private String getSOBankNo(String bankNo){
    	String SIBNo = loanPosBusinessCodeService.getExtAttrByNo("BankNo", bankNo);
    	if(SIBNo==null || SIBNo.trim().length()==0){
    		logger.error("银行["+bankNo+"]缺少超级网银行号");
    		SIBNo = "";		//reset SIBNo value
    	}
    	return SIBNo;
    }
    
    /**
     * 转换还款方式为核心还款方式
     * @param in
     * @return
     */
    private String transPaybackMethod(String in){
    	if(in==null || in.trim().length()==0 || in.equals("90")) return in;
    	
    	String out = loanPosBusinessCodeService.getExtAttrByNo("AccrualType", in);
    	if(out==null || out.trim().length()==0) return "";
    	
    	return out;
    }
}
