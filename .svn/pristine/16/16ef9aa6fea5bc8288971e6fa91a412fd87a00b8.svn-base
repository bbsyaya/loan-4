package com.hrbb.loan.pos.util;  

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.zip.CRC32;
import java.util.zip.CheckedOutputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import net.lingala.zip4j.core.ZipFile;
import net.lingala.zip4j.model.ZipParameters;
import net.lingala.zip4j.util.Zip4jConstants;

/** 
 * ZIP压缩工具 
 *  
 */  
public class ZipUtils {  

    public static final String EXT = ".zip";  
    private static final String BASE_DIR = "";  

    // 符号"/"用来作为目录标识判断符  
    private static final String PATH = "/";  
    private static final int BUFFER = 1024;  
    
    public static Logger logger = LoggerFactory.getLogger(ZipUtils.class);

    /** 
     * 压缩 
     *  
     * @param srcFile 
     * @throws Exception 
     */  
    public static void compress(File srcFile) throws Exception {  
        String name = srcFile.getName();  
        String basePath = srcFile.getParent();  
        String destPath = basePath + name + EXT;  
        compress(srcFile, destPath);  
    }  

    /** 
     * 压缩 
     *  
     * @param srcFile 
     *            源路径 
     * @param destPath 
     *            目标路径 
     * @throws Exception 
     */  
    public static void compress(File srcFile, File destFile) throws Exception {  

        // 对输出文件做CRC32校验  
        CheckedOutputStream cos = new CheckedOutputStream(new FileOutputStream(  
                destFile), new CRC32());  

        ZipOutputStream zos = new ZipOutputStream(cos);  

        compress(srcFile, zos, BASE_DIR);  

        zos.flush();  
        zos.close();  
    }  

    /** 
     * 压缩文件 
     *  
     * @param srcFile 
     * @param destPath 
     * @throws Exception 
     */  
    public static void compress(File srcFile, String destPath) throws Exception {  
        compress(srcFile, new File(destPath));  
    }  

    /** 
     * 压缩 
     *  
     * @param srcFile 
     *            源路径 
     * @param zos 
     *            ZipOutputStream 
     * @param basePath 
     *            压缩包内相对路径 
     * @throws Exception 
     */  
    private static void compress(File srcFile, ZipOutputStream zos,  
            String basePath) throws Exception {  
        if (srcFile.isDirectory()) {  
            compressDir(srcFile, zos, basePath);  
        } else {  
            compressFile(srcFile, zos, basePath);  
        }  
    }  

    /** 
     * 压缩 
     *  
     * @param srcPath 
     * @throws Exception 
     */  
    public static void compress(String srcPath) throws Exception {  
        File srcFile = new File(srcPath);  

        compress(srcFile);  
    }  

    /** 
     * 文件压缩 
     *  
     * @param srcPath 
     *            源文件路径 
     * @param destPath 
     *            目标文件路径 
     *  
     */  
    public static void compress(String srcPath, String destPath)  
            throws Exception {  
        File srcFile = new File(srcPath);  

        compress(srcFile, destPath);  
    }  

    /** 
     * 压缩目录 
     *  
     * @param dir 
     * @param zos 
     * @param basePath 
     * @throws Exception 
     */  
    private static void compressDir(File dir, ZipOutputStream zos,  
            String basePath) throws Exception {  

        File[] files = dir.listFiles();  

        // 构建空目录  
        if (files.length < 1) {  
            ZipEntry entry = new ZipEntry(basePath + dir.getName() + PATH);  

            zos.putNextEntry(entry);  
            zos.closeEntry();  
        }  

        for (File file : files) {  

            // 递归压缩  
            compress(file, zos, file.getName() + PATH);  

        }  
    }  

    /** 
     * 文件压缩 
     *  
     * @param file 
     *            待压缩文件 
     * @param zos 
     *            ZipOutputStream 
     * @param dir 
     *            压缩文件中的当前路径 
     * @throws Exception 
     */  
    private static void compressFile(File file, ZipOutputStream zos, String dir)  
            throws Exception {  

        /** 
         * 压缩包内文件名定义 
         *  
         * <pre> 
         * 如果有多级目录，那么这里就需要给出包含目录的文件名 
         * 如果用WinRAR打开压缩包，中文名将显示为乱码 
         * </pre> 
         */  
        ZipEntry entry = new ZipEntry(file.getName());  

        zos.putNextEntry(entry);  

        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(  
                file));  

        int count;  
        byte data[] = new byte[BUFFER];  
        while ((count = bis.read(data, 0, BUFFER)) != -1) {  
            zos.write(data, 0, count);  
        }  
        bis.close();  

        zos.closeEntry();  
    }  
    
    /**
     * 
     * 
     * @param srcfile
     * @param zipfile
     * @throws IOException 
     * @throws Exception 
     */
    public static void ZipFiles(File[] srcfile, File zipfile) throws IOException{  
        byte[] buf = new byte[BUFFER];  
         
        ZipOutputStream out = null;
        FileInputStream in = null;
        try {
            out = new ZipOutputStream(new FileOutputStream(zipfile));         
            for (int i = 0; i < srcfile.length; i++) {  
                in = new FileInputStream(srcfile[i]);  
                out.putNextEntry(new ZipEntry(srcfile[i].getName()));  
                int len;  
                while ((len = in.read(buf)) > 0) {  
                    out.write(buf, 0, len);  
                }
                in.close(); 
                out.closeEntry();                   
            }                 
            }catch (FileNotFoundException e) {
                throw e;
            }finally{
                out.close();
            }
    }
    
    /**
     * 加密压缩
     */
    public static boolean zipEncrypt(String zipFileName, String htmlFileName, String pwd){
    	try{
    		ZipFile zipFile = new ZipFile(zipFileName);
    		
    		ArrayList<File> filesToAdd = new ArrayList<File>();
    		filesToAdd.add(new File(htmlFileName));
    		
    		
    		ZipParameters parameters = new ZipParameters();
    		parameters.setCompressionMethod(Zip4jConstants.COMP_DEFLATE);
    		
    		parameters.setCompressionLevel(Zip4jConstants.DEFLATE_LEVEL_NORMAL); 
    		parameters.setEncryptFiles(true);
    		
    		parameters.setEncryptionMethod(Zip4jConstants.ENC_METHOD_AES);
    		
    		
    		parameters.setAesKeyStrength(Zip4jConstants.AES_STRENGTH_256);
    		parameters.setPassword(pwd);
    		
    		zipFile.addFiles(filesToAdd, parameters);
    		return true;
    		
    	}catch(Exception e){
    		logger.error("打包加密压缩文件异常");
    		return false;
    	}
    	
    }
    
}

    
    
 